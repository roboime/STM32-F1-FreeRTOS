
RTOS_Teste.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eb0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08001fc0  08001fc0  00011fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002028  08002028  00012028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800202c  0800202c  0001202c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000dc4  2000000c  0800203c  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000dd0  0800203c  00020dd0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000190f4  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000375b  00000000  00000000  00039129  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008102  00000000  00000000  0003c884  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c60  00000000  00000000  00044988  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ff0  00000000  00000000  000455e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006bd9  00000000  00000000  000465d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004bc4  00000000  00000000  0004d1b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00051d75  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000226c  00000000  00000000  00051df4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000000c 	.word	0x2000000c
 800012c:	00000000 	.word	0x00000000
 8000130:	08001fa8 	.word	0x08001fa8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000010 	.word	0x20000010
 800014c:	08001fa8 	.word	0x08001fa8

08000150 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a07      	ldr	r2, [pc, #28]	; (8000170 <HAL_Init+0x20>)
{
 8000152:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000154:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000156:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000158:	f043 0310 	orr.w	r3, r3, #16
 800015c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015e:	f000 f81b 	bl	8000198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f001 fe60 	bl	8001e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f001 fe18 	bl	8001d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd08      	pop	{r3, pc}
 8000170:	40022000 	.word	0x40022000

08000174 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000174:	4a03      	ldr	r2, [pc, #12]	; (8000184 <HAL_IncTick+0x10>)
 8000176:	4b04      	ldr	r3, [pc, #16]	; (8000188 <HAL_IncTick+0x14>)
 8000178:	6811      	ldr	r1, [r2, #0]
 800017a:	781b      	ldrb	r3, [r3, #0]
 800017c:	440b      	add	r3, r1
 800017e:	6013      	str	r3, [r2, #0]
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	20000d74 	.word	0x20000d74
 8000188:	20000000 	.word	0x20000000

0800018c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800018c:	4b01      	ldr	r3, [pc, #4]	; (8000194 <HAL_GetTick+0x8>)
 800018e:	6818      	ldr	r0, [r3, #0]
}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	20000d74 	.word	0x20000d74

08000198 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000198:	4a07      	ldr	r2, [pc, #28]	; (80001b8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800019a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800019c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800019e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001a6:	041b      	lsls	r3, r3, #16
 80001a8:	0c1b      	lsrs	r3, r3, #16
 80001aa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001b2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001b4:	60d3      	str	r3, [r2, #12]
 80001b6:	4770      	bx	lr
 80001b8:	e000ed00 	.word	0xe000ed00

080001bc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001bc:	4b17      	ldr	r3, [pc, #92]	; (800021c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80001be:	b530      	push	{r4, r5, lr}
 80001c0:	68dc      	ldr	r4, [r3, #12]
 80001c2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001c6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001ca:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80001cc:	2b04      	cmp	r3, #4
 80001ce:	bf28      	it	cs
 80001d0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001d2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001d4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001d8:	bf98      	it	ls
 80001da:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001dc:	fa05 f303 	lsl.w	r3, r5, r3
 80001e0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80001e4:	bf88      	it	hi
 80001e6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001e8:	4019      	ands	r1, r3
 80001ea:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80001ec:	fa05 f404 	lsl.w	r4, r5, r4
 80001f0:	3c01      	subs	r4, #1
 80001f2:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80001f4:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80001f6:	ea42 0201 	orr.w	r2, r2, r1
 80001fa:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001fe:	bfaf      	iteee	ge
 8000200:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000204:	4b06      	ldrlt	r3, [pc, #24]	; (8000220 <HAL_NVIC_SetPriority+0x64>)
 8000206:	f000 000f 	andlt.w	r0, r0, #15
 800020a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800020c:	bfa5      	ittet	ge
 800020e:	b2d2      	uxtbge	r2, r2
 8000210:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000214:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000216:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800021a:	bd30      	pop	{r4, r5, pc}
 800021c:	e000ed00 	.word	0xe000ed00
 8000220:	e000ed14 	.word	0xe000ed14

08000224 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000224:	2301      	movs	r3, #1
 8000226:	0942      	lsrs	r2, r0, #5
 8000228:	f000 001f 	and.w	r0, r0, #31
 800022c:	fa03 f000 	lsl.w	r0, r3, r0
 8000230:	4b01      	ldr	r3, [pc, #4]	; (8000238 <HAL_NVIC_EnableIRQ+0x14>)
 8000232:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000236:	4770      	bx	lr
 8000238:	e000e100 	.word	0xe000e100

0800023c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800023c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000240:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000242:	4616      	mov	r6, r2
 8000244:	4b65      	ldr	r3, [pc, #404]	; (80003dc <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000246:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80003ec <HAL_GPIO_Init+0x1b0>
 800024a:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80003f0 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800024e:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000252:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000254:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000258:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 800025c:	45a0      	cmp	r8, r4
 800025e:	d17f      	bne.n	8000360 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000260:	684d      	ldr	r5, [r1, #4]
 8000262:	2d12      	cmp	r5, #18
 8000264:	f000 80af 	beq.w	80003c6 <HAL_GPIO_Init+0x18a>
 8000268:	f200 8088 	bhi.w	800037c <HAL_GPIO_Init+0x140>
 800026c:	2d02      	cmp	r5, #2
 800026e:	f000 80a7 	beq.w	80003c0 <HAL_GPIO_Init+0x184>
 8000272:	d87c      	bhi.n	800036e <HAL_GPIO_Init+0x132>
 8000274:	2d00      	cmp	r5, #0
 8000276:	f000 808e 	beq.w	8000396 <HAL_GPIO_Init+0x15a>
 800027a:	2d01      	cmp	r5, #1
 800027c:	f000 809e 	beq.w	80003bc <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000280:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000284:	2cff      	cmp	r4, #255	; 0xff
 8000286:	bf93      	iteet	ls
 8000288:	4682      	movls	sl, r0
 800028a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 800028e:	3d08      	subhi	r5, #8
 8000290:	f8d0 b000 	ldrls.w	fp, [r0]
 8000294:	bf92      	itee	ls
 8000296:	00b5      	lslls	r5, r6, #2
 8000298:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800029c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800029e:	fa09 f805 	lsl.w	r8, r9, r5
 80002a2:	ea2b 0808 	bic.w	r8, fp, r8
 80002a6:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002aa:	bf88      	it	hi
 80002ac:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002b0:	ea48 0505 	orr.w	r5, r8, r5
 80002b4:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80002b8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80002bc:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80002c0:	d04e      	beq.n	8000360 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80002c2:	4d47      	ldr	r5, [pc, #284]	; (80003e0 <HAL_GPIO_Init+0x1a4>)
 80002c4:	4f46      	ldr	r7, [pc, #280]	; (80003e0 <HAL_GPIO_Init+0x1a4>)
 80002c6:	69ad      	ldr	r5, [r5, #24]
 80002c8:	f026 0803 	bic.w	r8, r6, #3
 80002cc:	f045 0501 	orr.w	r5, r5, #1
 80002d0:	61bd      	str	r5, [r7, #24]
 80002d2:	69bd      	ldr	r5, [r7, #24]
 80002d4:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80002d8:	f005 0501 	and.w	r5, r5, #1
 80002dc:	9501      	str	r5, [sp, #4]
 80002de:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80002e2:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80002e6:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80002e8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80002ec:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80002f0:	fa09 f90b 	lsl.w	r9, r9, fp
 80002f4:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80002f8:	4d3a      	ldr	r5, [pc, #232]	; (80003e4 <HAL_GPIO_Init+0x1a8>)
 80002fa:	42a8      	cmp	r0, r5
 80002fc:	d068      	beq.n	80003d0 <HAL_GPIO_Init+0x194>
 80002fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000302:	42a8      	cmp	r0, r5
 8000304:	d066      	beq.n	80003d4 <HAL_GPIO_Init+0x198>
 8000306:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800030a:	42a8      	cmp	r0, r5
 800030c:	d064      	beq.n	80003d8 <HAL_GPIO_Init+0x19c>
 800030e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000312:	42a8      	cmp	r0, r5
 8000314:	bf0c      	ite	eq
 8000316:	2503      	moveq	r5, #3
 8000318:	2504      	movne	r5, #4
 800031a:	fa05 f50b 	lsl.w	r5, r5, fp
 800031e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000322:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000326:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000328:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800032c:	bf14      	ite	ne
 800032e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000330:	43a5      	biceq	r5, r4
 8000332:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000334:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000336:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800033a:	bf14      	ite	ne
 800033c:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800033e:	43a5      	biceq	r5, r4
 8000340:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000342:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000344:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000348:	bf14      	ite	ne
 800034a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800034c:	43a5      	biceq	r5, r4
 800034e:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000350:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000352:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000356:	bf14      	ite	ne
 8000358:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800035a:	ea25 0404 	biceq.w	r4, r5, r4
 800035e:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000360:	3601      	adds	r6, #1
 8000362:	2e10      	cmp	r6, #16
 8000364:	f47f af73 	bne.w	800024e <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000368:	b003      	add	sp, #12
 800036a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800036e:	2d03      	cmp	r5, #3
 8000370:	d022      	beq.n	80003b8 <HAL_GPIO_Init+0x17c>
 8000372:	2d11      	cmp	r5, #17
 8000374:	d184      	bne.n	8000280 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000376:	68ca      	ldr	r2, [r1, #12]
 8000378:	3204      	adds	r2, #4
          break;
 800037a:	e781      	b.n	8000280 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800037c:	4f1a      	ldr	r7, [pc, #104]	; (80003e8 <HAL_GPIO_Init+0x1ac>)
 800037e:	42bd      	cmp	r5, r7
 8000380:	d009      	beq.n	8000396 <HAL_GPIO_Init+0x15a>
 8000382:	d812      	bhi.n	80003aa <HAL_GPIO_Init+0x16e>
 8000384:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80003f4 <HAL_GPIO_Init+0x1b8>
 8000388:	454d      	cmp	r5, r9
 800038a:	d004      	beq.n	8000396 <HAL_GPIO_Init+0x15a>
 800038c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000390:	454d      	cmp	r5, r9
 8000392:	f47f af75 	bne.w	8000280 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000396:	688a      	ldr	r2, [r1, #8]
 8000398:	b1c2      	cbz	r2, 80003cc <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800039a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800039c:	bf0c      	ite	eq
 800039e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80003a2:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80003a6:	2208      	movs	r2, #8
 80003a8:	e76a      	b.n	8000280 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003aa:	4575      	cmp	r5, lr
 80003ac:	d0f3      	beq.n	8000396 <HAL_GPIO_Init+0x15a>
 80003ae:	4565      	cmp	r5, ip
 80003b0:	d0f1      	beq.n	8000396 <HAL_GPIO_Init+0x15a>
 80003b2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80003f8 <HAL_GPIO_Init+0x1bc>
 80003b6:	e7eb      	b.n	8000390 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80003b8:	2200      	movs	r2, #0
 80003ba:	e761      	b.n	8000280 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80003bc:	68ca      	ldr	r2, [r1, #12]
          break;
 80003be:	e75f      	b.n	8000280 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80003c0:	68ca      	ldr	r2, [r1, #12]
 80003c2:	3208      	adds	r2, #8
          break;
 80003c4:	e75c      	b.n	8000280 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80003c6:	68ca      	ldr	r2, [r1, #12]
 80003c8:	320c      	adds	r2, #12
          break;
 80003ca:	e759      	b.n	8000280 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80003cc:	2204      	movs	r2, #4
 80003ce:	e757      	b.n	8000280 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80003d0:	2500      	movs	r5, #0
 80003d2:	e7a2      	b.n	800031a <HAL_GPIO_Init+0xde>
 80003d4:	2501      	movs	r5, #1
 80003d6:	e7a0      	b.n	800031a <HAL_GPIO_Init+0xde>
 80003d8:	2502      	movs	r5, #2
 80003da:	e79e      	b.n	800031a <HAL_GPIO_Init+0xde>
 80003dc:	40010400 	.word	0x40010400
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40010800 	.word	0x40010800
 80003e8:	10210000 	.word	0x10210000
 80003ec:	10310000 	.word	0x10310000
 80003f0:	10320000 	.word	0x10320000
 80003f4:	10110000 	.word	0x10110000
 80003f8:	10220000 	.word	0x10220000

080003fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80003fc:	b10a      	cbz	r2, 8000402 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80003fe:	6101      	str	r1, [r0, #16]
 8000400:	4770      	bx	lr
 8000402:	0409      	lsls	r1, r1, #16
 8000404:	e7fb      	b.n	80003fe <HAL_GPIO_WritePin+0x2>
	...

08000408 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000408:	2201      	movs	r2, #1
 800040a:	4b01      	ldr	r3, [pc, #4]	; (8000410 <HAL_PWR_EnableBkUpAccess+0x8>)
 800040c:	601a      	str	r2, [r3, #0]
 800040e:	4770      	bx	lr
 8000410:	420e0020 	.word	0x420e0020

08000414 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000414:	6803      	ldr	r3, [r0, #0]
{
 8000416:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800041a:	07db      	lsls	r3, r3, #31
{
 800041c:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800041e:	d410      	bmi.n	8000442 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000420:	682b      	ldr	r3, [r5, #0]
 8000422:	079f      	lsls	r7, r3, #30
 8000424:	d45e      	bmi.n	80004e4 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000426:	682b      	ldr	r3, [r5, #0]
 8000428:	0719      	lsls	r1, r3, #28
 800042a:	f100 8095 	bmi.w	8000558 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800042e:	682b      	ldr	r3, [r5, #0]
 8000430:	075a      	lsls	r2, r3, #29
 8000432:	f100 80bf 	bmi.w	80005b4 <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000436:	69ea      	ldr	r2, [r5, #28]
 8000438:	2a00      	cmp	r2, #0
 800043a:	f040 812d 	bne.w	8000698 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800043e:	2000      	movs	r0, #0
 8000440:	e014      	b.n	800046c <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000442:	4c90      	ldr	r4, [pc, #576]	; (8000684 <HAL_RCC_OscConfig+0x270>)
 8000444:	6863      	ldr	r3, [r4, #4]
 8000446:	f003 030c 	and.w	r3, r3, #12
 800044a:	2b04      	cmp	r3, #4
 800044c:	d007      	beq.n	800045e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800044e:	6863      	ldr	r3, [r4, #4]
 8000450:	f003 030c 	and.w	r3, r3, #12
 8000454:	2b08      	cmp	r3, #8
 8000456:	d10c      	bne.n	8000472 <HAL_RCC_OscConfig+0x5e>
 8000458:	6863      	ldr	r3, [r4, #4]
 800045a:	03de      	lsls	r6, r3, #15
 800045c:	d509      	bpl.n	8000472 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800045e:	6823      	ldr	r3, [r4, #0]
 8000460:	039c      	lsls	r4, r3, #14
 8000462:	d5dd      	bpl.n	8000420 <HAL_RCC_OscConfig+0xc>
 8000464:	686b      	ldr	r3, [r5, #4]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d1da      	bne.n	8000420 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800046a:	2001      	movs	r0, #1
}
 800046c:	b002      	add	sp, #8
 800046e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000472:	686b      	ldr	r3, [r5, #4]
 8000474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000478:	d110      	bne.n	800049c <HAL_RCC_OscConfig+0x88>
 800047a:	6823      	ldr	r3, [r4, #0]
 800047c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000480:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000482:	f7ff fe83 	bl	800018c <HAL_GetTick>
 8000486:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000488:	6823      	ldr	r3, [r4, #0]
 800048a:	0398      	lsls	r0, r3, #14
 800048c:	d4c8      	bmi.n	8000420 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800048e:	f7ff fe7d 	bl	800018c <HAL_GetTick>
 8000492:	1b80      	subs	r0, r0, r6
 8000494:	2864      	cmp	r0, #100	; 0x64
 8000496:	d9f7      	bls.n	8000488 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000498:	2003      	movs	r0, #3
 800049a:	e7e7      	b.n	800046c <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800049c:	b99b      	cbnz	r3, 80004c6 <HAL_RCC_OscConfig+0xb2>
 800049e:	6823      	ldr	r3, [r4, #0]
 80004a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004a4:	6023      	str	r3, [r4, #0]
 80004a6:	6823      	ldr	r3, [r4, #0]
 80004a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004ac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80004ae:	f7ff fe6d 	bl	800018c <HAL_GetTick>
 80004b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80004b4:	6823      	ldr	r3, [r4, #0]
 80004b6:	0399      	lsls	r1, r3, #14
 80004b8:	d5b2      	bpl.n	8000420 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80004ba:	f7ff fe67 	bl	800018c <HAL_GetTick>
 80004be:	1b80      	subs	r0, r0, r6
 80004c0:	2864      	cmp	r0, #100	; 0x64
 80004c2:	d9f7      	bls.n	80004b4 <HAL_RCC_OscConfig+0xa0>
 80004c4:	e7e8      	b.n	8000498 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80004ca:	6823      	ldr	r3, [r4, #0]
 80004cc:	d103      	bne.n	80004d6 <HAL_RCC_OscConfig+0xc2>
 80004ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004d2:	6023      	str	r3, [r4, #0]
 80004d4:	e7d1      	b.n	800047a <HAL_RCC_OscConfig+0x66>
 80004d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004da:	6023      	str	r3, [r4, #0]
 80004dc:	6823      	ldr	r3, [r4, #0]
 80004de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004e2:	e7cd      	b.n	8000480 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80004e4:	4c67      	ldr	r4, [pc, #412]	; (8000684 <HAL_RCC_OscConfig+0x270>)
 80004e6:	6863      	ldr	r3, [r4, #4]
 80004e8:	f013 0f0c 	tst.w	r3, #12
 80004ec:	d007      	beq.n	80004fe <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80004ee:	6863      	ldr	r3, [r4, #4]
 80004f0:	f003 030c 	and.w	r3, r3, #12
 80004f4:	2b08      	cmp	r3, #8
 80004f6:	d110      	bne.n	800051a <HAL_RCC_OscConfig+0x106>
 80004f8:	6863      	ldr	r3, [r4, #4]
 80004fa:	03da      	lsls	r2, r3, #15
 80004fc:	d40d      	bmi.n	800051a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80004fe:	6823      	ldr	r3, [r4, #0]
 8000500:	079b      	lsls	r3, r3, #30
 8000502:	d502      	bpl.n	800050a <HAL_RCC_OscConfig+0xf6>
 8000504:	692b      	ldr	r3, [r5, #16]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d1af      	bne.n	800046a <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800050a:	6823      	ldr	r3, [r4, #0]
 800050c:	696a      	ldr	r2, [r5, #20]
 800050e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000512:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000516:	6023      	str	r3, [r4, #0]
 8000518:	e785      	b.n	8000426 <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800051a:	692a      	ldr	r2, [r5, #16]
 800051c:	4b5a      	ldr	r3, [pc, #360]	; (8000688 <HAL_RCC_OscConfig+0x274>)
 800051e:	b16a      	cbz	r2, 800053c <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000520:	2201      	movs	r2, #1
 8000522:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000524:	f7ff fe32 	bl	800018c <HAL_GetTick>
 8000528:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800052a:	6823      	ldr	r3, [r4, #0]
 800052c:	079f      	lsls	r7, r3, #30
 800052e:	d4ec      	bmi.n	800050a <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000530:	f7ff fe2c 	bl	800018c <HAL_GetTick>
 8000534:	1b80      	subs	r0, r0, r6
 8000536:	2802      	cmp	r0, #2
 8000538:	d9f7      	bls.n	800052a <HAL_RCC_OscConfig+0x116>
 800053a:	e7ad      	b.n	8000498 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 800053c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800053e:	f7ff fe25 	bl	800018c <HAL_GetTick>
 8000542:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000544:	6823      	ldr	r3, [r4, #0]
 8000546:	0798      	lsls	r0, r3, #30
 8000548:	f57f af6d 	bpl.w	8000426 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800054c:	f7ff fe1e 	bl	800018c <HAL_GetTick>
 8000550:	1b80      	subs	r0, r0, r6
 8000552:	2802      	cmp	r0, #2
 8000554:	d9f6      	bls.n	8000544 <HAL_RCC_OscConfig+0x130>
 8000556:	e79f      	b.n	8000498 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000558:	69aa      	ldr	r2, [r5, #24]
 800055a:	4c4a      	ldr	r4, [pc, #296]	; (8000684 <HAL_RCC_OscConfig+0x270>)
 800055c:	4b4b      	ldr	r3, [pc, #300]	; (800068c <HAL_RCC_OscConfig+0x278>)
 800055e:	b1da      	cbz	r2, 8000598 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000560:	2201      	movs	r2, #1
 8000562:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000564:	f7ff fe12 	bl	800018c <HAL_GetTick>
 8000568:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800056a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800056c:	079b      	lsls	r3, r3, #30
 800056e:	d50d      	bpl.n	800058c <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000570:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000574:	4b46      	ldr	r3, [pc, #280]	; (8000690 <HAL_RCC_OscConfig+0x27c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	fbb3 f3f2 	udiv	r3, r3, r2
 800057c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800057e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000580:	9b01      	ldr	r3, [sp, #4]
 8000582:	1e5a      	subs	r2, r3, #1
 8000584:	9201      	str	r2, [sp, #4]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d1f9      	bne.n	800057e <HAL_RCC_OscConfig+0x16a>
 800058a:	e750      	b.n	800042e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800058c:	f7ff fdfe 	bl	800018c <HAL_GetTick>
 8000590:	1b80      	subs	r0, r0, r6
 8000592:	2802      	cmp	r0, #2
 8000594:	d9e9      	bls.n	800056a <HAL_RCC_OscConfig+0x156>
 8000596:	e77f      	b.n	8000498 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000598:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800059a:	f7ff fdf7 	bl	800018c <HAL_GetTick>
 800059e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80005a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80005a2:	079f      	lsls	r7, r3, #30
 80005a4:	f57f af43 	bpl.w	800042e <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80005a8:	f7ff fdf0 	bl	800018c <HAL_GetTick>
 80005ac:	1b80      	subs	r0, r0, r6
 80005ae:	2802      	cmp	r0, #2
 80005b0:	d9f6      	bls.n	80005a0 <HAL_RCC_OscConfig+0x18c>
 80005b2:	e771      	b.n	8000498 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80005b4:	4c33      	ldr	r4, [pc, #204]	; (8000684 <HAL_RCC_OscConfig+0x270>)
 80005b6:	69e3      	ldr	r3, [r4, #28]
 80005b8:	00d8      	lsls	r0, r3, #3
 80005ba:	d424      	bmi.n	8000606 <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 80005bc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	69e3      	ldr	r3, [r4, #28]
 80005c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c4:	61e3      	str	r3, [r4, #28]
 80005c6:	69e3      	ldr	r3, [r4, #28]
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80005d0:	4e30      	ldr	r6, [pc, #192]	; (8000694 <HAL_RCC_OscConfig+0x280>)
 80005d2:	6833      	ldr	r3, [r6, #0]
 80005d4:	05d9      	lsls	r1, r3, #23
 80005d6:	d518      	bpl.n	800060a <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80005d8:	68eb      	ldr	r3, [r5, #12]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d126      	bne.n	800062c <HAL_RCC_OscConfig+0x218>
 80005de:	6a23      	ldr	r3, [r4, #32]
 80005e0:	f043 0301 	orr.w	r3, r3, #1
 80005e4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80005e6:	f7ff fdd1 	bl	800018c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80005ea:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80005ee:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80005f0:	6a23      	ldr	r3, [r4, #32]
 80005f2:	079b      	lsls	r3, r3, #30
 80005f4:	d53f      	bpl.n	8000676 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 80005f6:	2f00      	cmp	r7, #0
 80005f8:	f43f af1d 	beq.w	8000436 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80005fc:	69e3      	ldr	r3, [r4, #28]
 80005fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000602:	61e3      	str	r3, [r4, #28]
 8000604:	e717      	b.n	8000436 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000606:	2700      	movs	r7, #0
 8000608:	e7e2      	b.n	80005d0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800060a:	6833      	ldr	r3, [r6, #0]
 800060c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000610:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000612:	f7ff fdbb 	bl	800018c <HAL_GetTick>
 8000616:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000618:	6833      	ldr	r3, [r6, #0]
 800061a:	05da      	lsls	r2, r3, #23
 800061c:	d4dc      	bmi.n	80005d8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800061e:	f7ff fdb5 	bl	800018c <HAL_GetTick>
 8000622:	eba0 0008 	sub.w	r0, r0, r8
 8000626:	2864      	cmp	r0, #100	; 0x64
 8000628:	d9f6      	bls.n	8000618 <HAL_RCC_OscConfig+0x204>
 800062a:	e735      	b.n	8000498 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800062c:	b9ab      	cbnz	r3, 800065a <HAL_RCC_OscConfig+0x246>
 800062e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000630:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000634:	f023 0301 	bic.w	r3, r3, #1
 8000638:	6223      	str	r3, [r4, #32]
 800063a:	6a23      	ldr	r3, [r4, #32]
 800063c:	f023 0304 	bic.w	r3, r3, #4
 8000640:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000642:	f7ff fda3 	bl	800018c <HAL_GetTick>
 8000646:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000648:	6a23      	ldr	r3, [r4, #32]
 800064a:	0798      	lsls	r0, r3, #30
 800064c:	d5d3      	bpl.n	80005f6 <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800064e:	f7ff fd9d 	bl	800018c <HAL_GetTick>
 8000652:	1b80      	subs	r0, r0, r6
 8000654:	4540      	cmp	r0, r8
 8000656:	d9f7      	bls.n	8000648 <HAL_RCC_OscConfig+0x234>
 8000658:	e71e      	b.n	8000498 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800065a:	2b05      	cmp	r3, #5
 800065c:	6a23      	ldr	r3, [r4, #32]
 800065e:	d103      	bne.n	8000668 <HAL_RCC_OscConfig+0x254>
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	6223      	str	r3, [r4, #32]
 8000666:	e7ba      	b.n	80005de <HAL_RCC_OscConfig+0x1ca>
 8000668:	f023 0301 	bic.w	r3, r3, #1
 800066c:	6223      	str	r3, [r4, #32]
 800066e:	6a23      	ldr	r3, [r4, #32]
 8000670:	f023 0304 	bic.w	r3, r3, #4
 8000674:	e7b6      	b.n	80005e4 <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000676:	f7ff fd89 	bl	800018c <HAL_GetTick>
 800067a:	eba0 0008 	sub.w	r0, r0, r8
 800067e:	42b0      	cmp	r0, r6
 8000680:	d9b6      	bls.n	80005f0 <HAL_RCC_OscConfig+0x1dc>
 8000682:	e709      	b.n	8000498 <HAL_RCC_OscConfig+0x84>
 8000684:	40021000 	.word	0x40021000
 8000688:	42420000 	.word	0x42420000
 800068c:	42420480 	.word	0x42420480
 8000690:	20000008 	.word	0x20000008
 8000694:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000698:	4c22      	ldr	r4, [pc, #136]	; (8000724 <HAL_RCC_OscConfig+0x310>)
 800069a:	6863      	ldr	r3, [r4, #4]
 800069c:	f003 030c 	and.w	r3, r3, #12
 80006a0:	2b08      	cmp	r3, #8
 80006a2:	f43f aee2 	beq.w	800046a <HAL_RCC_OscConfig+0x56>
 80006a6:	2300      	movs	r3, #0
 80006a8:	4e1f      	ldr	r6, [pc, #124]	; (8000728 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80006aa:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80006ac:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80006ae:	d12b      	bne.n	8000708 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80006b0:	f7ff fd6c 	bl	800018c <HAL_GetTick>
 80006b4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80006b6:	6823      	ldr	r3, [r4, #0]
 80006b8:	0199      	lsls	r1, r3, #6
 80006ba:	d41f      	bmi.n	80006fc <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80006bc:	6a2b      	ldr	r3, [r5, #32]
 80006be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006c2:	d105      	bne.n	80006d0 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80006c4:	6862      	ldr	r2, [r4, #4]
 80006c6:	68a9      	ldr	r1, [r5, #8]
 80006c8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80006cc:	430a      	orrs	r2, r1
 80006ce:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80006d0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80006d2:	6862      	ldr	r2, [r4, #4]
 80006d4:	430b      	orrs	r3, r1
 80006d6:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80006da:	4313      	orrs	r3, r2
 80006dc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80006de:	2301      	movs	r3, #1
 80006e0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80006e2:	f7ff fd53 	bl	800018c <HAL_GetTick>
 80006e6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80006e8:	6823      	ldr	r3, [r4, #0]
 80006ea:	019a      	lsls	r2, r3, #6
 80006ec:	f53f aea7 	bmi.w	800043e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80006f0:	f7ff fd4c 	bl	800018c <HAL_GetTick>
 80006f4:	1b40      	subs	r0, r0, r5
 80006f6:	2802      	cmp	r0, #2
 80006f8:	d9f6      	bls.n	80006e8 <HAL_RCC_OscConfig+0x2d4>
 80006fa:	e6cd      	b.n	8000498 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80006fc:	f7ff fd46 	bl	800018c <HAL_GetTick>
 8000700:	1bc0      	subs	r0, r0, r7
 8000702:	2802      	cmp	r0, #2
 8000704:	d9d7      	bls.n	80006b6 <HAL_RCC_OscConfig+0x2a2>
 8000706:	e6c7      	b.n	8000498 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000708:	f7ff fd40 	bl	800018c <HAL_GetTick>
 800070c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800070e:	6823      	ldr	r3, [r4, #0]
 8000710:	019b      	lsls	r3, r3, #6
 8000712:	f57f ae94 	bpl.w	800043e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000716:	f7ff fd39 	bl	800018c <HAL_GetTick>
 800071a:	1b40      	subs	r0, r0, r5
 800071c:	2802      	cmp	r0, #2
 800071e:	d9f6      	bls.n	800070e <HAL_RCC_OscConfig+0x2fa>
 8000720:	e6ba      	b.n	8000498 <HAL_RCC_OscConfig+0x84>
 8000722:	bf00      	nop
 8000724:	40021000 	.word	0x40021000
 8000728:	42420060 	.word	0x42420060

0800072c <HAL_RCC_GetSysClockFreq>:
{
 800072c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000730:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000732:	ac02      	add	r4, sp, #8
 8000734:	f103 0510 	add.w	r5, r3, #16
 8000738:	4622      	mov	r2, r4
 800073a:	6818      	ldr	r0, [r3, #0]
 800073c:	6859      	ldr	r1, [r3, #4]
 800073e:	3308      	adds	r3, #8
 8000740:	c203      	stmia	r2!, {r0, r1}
 8000742:	42ab      	cmp	r3, r5
 8000744:	4614      	mov	r4, r2
 8000746:	d1f7      	bne.n	8000738 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000748:	2301      	movs	r3, #1
 800074a:	f88d 3004 	strb.w	r3, [sp, #4]
 800074e:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000750:	4911      	ldr	r1, [pc, #68]	; (8000798 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000752:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000756:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000758:	f003 020c 	and.w	r2, r3, #12
 800075c:	2a08      	cmp	r2, #8
 800075e:	d117      	bne.n	8000790 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000760:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000764:	a806      	add	r0, sp, #24
 8000766:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000768:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800076a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800076e:	d50c      	bpl.n	800078a <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000770:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000772:	480a      	ldr	r0, [pc, #40]	; (800079c <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000774:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000778:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800077a:	aa06      	add	r2, sp, #24
 800077c:	4413      	add	r3, r2
 800077e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000782:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000786:	b007      	add	sp, #28
 8000788:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800078a:	4805      	ldr	r0, [pc, #20]	; (80007a0 <HAL_RCC_GetSysClockFreq+0x74>)
 800078c:	4350      	muls	r0, r2
 800078e:	e7fa      	b.n	8000786 <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000790:	4802      	ldr	r0, [pc, #8]	; (800079c <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000792:	e7f8      	b.n	8000786 <HAL_RCC_GetSysClockFreq+0x5a>
 8000794:	08001fc0 	.word	0x08001fc0
 8000798:	40021000 	.word	0x40021000
 800079c:	007a1200 	.word	0x007a1200
 80007a0:	003d0900 	.word	0x003d0900

080007a4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007a4:	4a54      	ldr	r2, [pc, #336]	; (80008f8 <HAL_RCC_ClockConfig+0x154>)
{
 80007a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007aa:	6813      	ldr	r3, [r2, #0]
{
 80007ac:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	428b      	cmp	r3, r1
{
 80007b4:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80007b6:	d32a      	bcc.n	800080e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80007b8:	6829      	ldr	r1, [r5, #0]
 80007ba:	078c      	lsls	r4, r1, #30
 80007bc:	d434      	bmi.n	8000828 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80007be:	07ca      	lsls	r2, r1, #31
 80007c0:	d447      	bmi.n	8000852 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80007c2:	4a4d      	ldr	r2, [pc, #308]	; (80008f8 <HAL_RCC_ClockConfig+0x154>)
 80007c4:	6813      	ldr	r3, [r2, #0]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	429e      	cmp	r6, r3
 80007cc:	f0c0 8082 	bcc.w	80008d4 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80007d0:	682a      	ldr	r2, [r5, #0]
 80007d2:	4c4a      	ldr	r4, [pc, #296]	; (80008fc <HAL_RCC_ClockConfig+0x158>)
 80007d4:	f012 0f04 	tst.w	r2, #4
 80007d8:	f040 8087 	bne.w	80008ea <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80007dc:	0713      	lsls	r3, r2, #28
 80007de:	d506      	bpl.n	80007ee <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80007e0:	6863      	ldr	r3, [r4, #4]
 80007e2:	692a      	ldr	r2, [r5, #16]
 80007e4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80007e8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80007ec:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80007ee:	f7ff ff9d 	bl	800072c <HAL_RCC_GetSysClockFreq>
 80007f2:	6863      	ldr	r3, [r4, #4]
 80007f4:	4a42      	ldr	r2, [pc, #264]	; (8000900 <HAL_RCC_ClockConfig+0x15c>)
 80007f6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80007fa:	5cd3      	ldrb	r3, [r2, r3]
 80007fc:	40d8      	lsrs	r0, r3
 80007fe:	4b41      	ldr	r3, [pc, #260]	; (8000904 <HAL_RCC_ClockConfig+0x160>)
 8000800:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000802:	2000      	movs	r0, #0
 8000804:	f001 fb10 	bl	8001e28 <HAL_InitTick>
  return HAL_OK;
 8000808:	2000      	movs	r0, #0
}
 800080a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800080e:	6813      	ldr	r3, [r2, #0]
 8000810:	f023 0307 	bic.w	r3, r3, #7
 8000814:	430b      	orrs	r3, r1
 8000816:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000818:	6813      	ldr	r3, [r2, #0]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	4299      	cmp	r1, r3
 8000820:	d0ca      	beq.n	80007b8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000822:	2001      	movs	r0, #1
 8000824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000828:	4b34      	ldr	r3, [pc, #208]	; (80008fc <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800082a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800082e:	bf1e      	ittt	ne
 8000830:	685a      	ldrne	r2, [r3, #4]
 8000832:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000836:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000838:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800083a:	bf42      	ittt	mi
 800083c:	685a      	ldrmi	r2, [r3, #4]
 800083e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000842:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000844:	685a      	ldr	r2, [r3, #4]
 8000846:	68a8      	ldr	r0, [r5, #8]
 8000848:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800084c:	4302      	orrs	r2, r0
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	e7b5      	b.n	80007be <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000852:	686a      	ldr	r2, [r5, #4]
 8000854:	4c29      	ldr	r4, [pc, #164]	; (80008fc <HAL_RCC_ClockConfig+0x158>)
 8000856:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000858:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800085a:	d11c      	bne.n	8000896 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800085c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000860:	d0df      	beq.n	8000822 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000862:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000864:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000868:	f023 0303 	bic.w	r3, r3, #3
 800086c:	4313      	orrs	r3, r2
 800086e:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000870:	f7ff fc8c 	bl	800018c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000874:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000876:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000878:	2b01      	cmp	r3, #1
 800087a:	d114      	bne.n	80008a6 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800087c:	6863      	ldr	r3, [r4, #4]
 800087e:	f003 030c 	and.w	r3, r3, #12
 8000882:	2b04      	cmp	r3, #4
 8000884:	d09d      	beq.n	80007c2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000886:	f7ff fc81 	bl	800018c <HAL_GetTick>
 800088a:	1bc0      	subs	r0, r0, r7
 800088c:	4540      	cmp	r0, r8
 800088e:	d9f5      	bls.n	800087c <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000890:	2003      	movs	r0, #3
 8000892:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000896:	2a02      	cmp	r2, #2
 8000898:	d102      	bne.n	80008a0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800089a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800089e:	e7df      	b.n	8000860 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008a0:	f013 0f02 	tst.w	r3, #2
 80008a4:	e7dc      	b.n	8000860 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d10f      	bne.n	80008ca <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008aa:	6863      	ldr	r3, [r4, #4]
 80008ac:	f003 030c 	and.w	r3, r3, #12
 80008b0:	2b08      	cmp	r3, #8
 80008b2:	d086      	beq.n	80007c2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008b4:	f7ff fc6a 	bl	800018c <HAL_GetTick>
 80008b8:	1bc0      	subs	r0, r0, r7
 80008ba:	4540      	cmp	r0, r8
 80008bc:	d9f5      	bls.n	80008aa <HAL_RCC_ClockConfig+0x106>
 80008be:	e7e7      	b.n	8000890 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008c0:	f7ff fc64 	bl	800018c <HAL_GetTick>
 80008c4:	1bc0      	subs	r0, r0, r7
 80008c6:	4540      	cmp	r0, r8
 80008c8:	d8e2      	bhi.n	8000890 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80008ca:	6863      	ldr	r3, [r4, #4]
 80008cc:	f013 0f0c 	tst.w	r3, #12
 80008d0:	d1f6      	bne.n	80008c0 <HAL_RCC_ClockConfig+0x11c>
 80008d2:	e776      	b.n	80007c2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80008d4:	6813      	ldr	r3, [r2, #0]
 80008d6:	f023 0307 	bic.w	r3, r3, #7
 80008da:	4333      	orrs	r3, r6
 80008dc:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80008de:	6813      	ldr	r3, [r2, #0]
 80008e0:	f003 0307 	and.w	r3, r3, #7
 80008e4:	429e      	cmp	r6, r3
 80008e6:	d19c      	bne.n	8000822 <HAL_RCC_ClockConfig+0x7e>
 80008e8:	e772      	b.n	80007d0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80008ea:	6863      	ldr	r3, [r4, #4]
 80008ec:	68e9      	ldr	r1, [r5, #12]
 80008ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80008f2:	430b      	orrs	r3, r1
 80008f4:	6063      	str	r3, [r4, #4]
 80008f6:	e771      	b.n	80007dc <HAL_RCC_ClockConfig+0x38>
 80008f8:	40022000 	.word	0x40022000
 80008fc:	40021000 	.word	0x40021000
 8000900:	0800200d 	.word	0x0800200d
 8000904:	20000008 	.word	0x20000008

08000908 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <HAL_RCC_GetPCLK2Freq+0x14>)
 800090a:	4a05      	ldr	r2, [pc, #20]	; (8000920 <HAL_RCC_GetPCLK2Freq+0x18>)
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000912:	5cd3      	ldrb	r3, [r2, r3]
 8000914:	4a03      	ldr	r2, [pc, #12]	; (8000924 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000916:	6810      	ldr	r0, [r2, #0]
} 
 8000918:	40d8      	lsrs	r0, r3
 800091a:	4770      	bx	lr
 800091c:	40021000 	.word	0x40021000
 8000920:	0800201d 	.word	0x0800201d
 8000924:	20000008 	.word	0x20000008

08000928 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000928:	230f      	movs	r3, #15
 800092a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_RCC_GetClockConfig+0x34>)
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	f002 0203 	and.w	r2, r2, #3
 8000934:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000936:	685a      	ldr	r2, [r3, #4]
 8000938:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800093c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 800093e:	685a      	ldr	r2, [r3, #4]
 8000940:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000944:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	08db      	lsrs	r3, r3, #3
 800094a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800094e:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <HAL_RCC_GetClockConfig+0x38>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f003 0307 	and.w	r3, r3, #7
 8000958:	600b      	str	r3, [r1, #0]
 800095a:	4770      	bx	lr
 800095c:	40021000 	.word	0x40021000
 8000960:	40022000 	.word	0x40022000

08000964 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000964:	6803      	ldr	r3, [r0, #0]
{
 8000966:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800096a:	07d9      	lsls	r1, r3, #31
{
 800096c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800096e:	d520      	bpl.n	80009b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000970:	4c35      	ldr	r4, [pc, #212]	; (8000a48 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000972:	69e3      	ldr	r3, [r4, #28]
 8000974:	00da      	lsls	r2, r3, #3
 8000976:	d432      	bmi.n	80009de <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000978:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	69e3      	ldr	r3, [r4, #28]
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	61e3      	str	r3, [r4, #28]
 8000982:	69e3      	ldr	r3, [r4, #28]
 8000984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000988:	9301      	str	r3, [sp, #4]
 800098a:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800098c:	4e2f      	ldr	r6, [pc, #188]	; (8000a4c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800098e:	6833      	ldr	r3, [r6, #0]
 8000990:	05db      	lsls	r3, r3, #23
 8000992:	d526      	bpl.n	80009e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000994:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000996:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800099a:	d136      	bne.n	8000a0a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800099c:	6a23      	ldr	r3, [r4, #32]
 800099e:	686a      	ldr	r2, [r5, #4]
 80009a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009a4:	4313      	orrs	r3, r2
 80009a6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80009a8:	b11f      	cbz	r7, 80009b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80009aa:	69e3      	ldr	r3, [r4, #28]
 80009ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009b0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80009b2:	6828      	ldr	r0, [r5, #0]
 80009b4:	0783      	lsls	r3, r0, #30
 80009b6:	d506      	bpl.n	80009c6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80009b8:	4a23      	ldr	r2, [pc, #140]	; (8000a48 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80009ba:	68a9      	ldr	r1, [r5, #8]
 80009bc:	6853      	ldr	r3, [r2, #4]
 80009be:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009c2:	430b      	orrs	r3, r1
 80009c4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80009c6:	f010 0010 	ands.w	r0, r0, #16
 80009ca:	d01b      	beq.n	8000a04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80009cc:	4a1e      	ldr	r2, [pc, #120]	; (8000a48 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80009ce:	68e9      	ldr	r1, [r5, #12]
 80009d0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80009d2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80009d4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80009d8:	430b      	orrs	r3, r1
 80009da:	6053      	str	r3, [r2, #4]
 80009dc:	e012      	b.n	8000a04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80009de:	2700      	movs	r7, #0
 80009e0:	e7d4      	b.n	800098c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009e2:	6833      	ldr	r3, [r6, #0]
 80009e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80009ea:	f7ff fbcf 	bl	800018c <HAL_GetTick>
 80009ee:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009f0:	6833      	ldr	r3, [r6, #0]
 80009f2:	05d8      	lsls	r0, r3, #23
 80009f4:	d4ce      	bmi.n	8000994 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009f6:	f7ff fbc9 	bl	800018c <HAL_GetTick>
 80009fa:	eba0 0008 	sub.w	r0, r0, r8
 80009fe:	2864      	cmp	r0, #100	; 0x64
 8000a00:	d9f6      	bls.n	80009f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000a02:	2003      	movs	r0, #3
}
 8000a04:	b002      	add	sp, #8
 8000a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000a0a:	686a      	ldr	r2, [r5, #4]
 8000a0c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d0c3      	beq.n	800099c <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000a14:	2001      	movs	r0, #1
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000a18:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000a1a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000a1c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000a1e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000a22:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000a24:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000a26:	07d9      	lsls	r1, r3, #31
 8000a28:	d5b8      	bpl.n	800099c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000a2a:	f7ff fbaf 	bl	800018c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a2e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000a32:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a34:	6a23      	ldr	r3, [r4, #32]
 8000a36:	079a      	lsls	r2, r3, #30
 8000a38:	d4b0      	bmi.n	800099c <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000a3a:	f7ff fba7 	bl	800018c <HAL_GetTick>
 8000a3e:	1b80      	subs	r0, r0, r6
 8000a40:	4540      	cmp	r0, r8
 8000a42:	d9f7      	bls.n	8000a34 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000a44:	e7dd      	b.n	8000a02 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000a46:	bf00      	nop
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	40007000 	.word	0x40007000
 8000a50:	42420440 	.word	0x42420440

08000a54 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8000a54:	b570      	push	{r4, r5, r6, lr}
 8000a56:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a58:	4b35      	ldr	r3, [pc, #212]	; (8000b30 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8000a5a:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000a5c:	ad02      	add	r5, sp, #8
 8000a5e:	f103 0610 	add.w	r6, r3, #16
 8000a62:	462a      	mov	r2, r5
 8000a64:	6818      	ldr	r0, [r3, #0]
 8000a66:	6859      	ldr	r1, [r3, #4]
 8000a68:	3308      	adds	r3, #8
 8000a6a:	c203      	stmia	r2!, {r0, r1}
 8000a6c:	42b3      	cmp	r3, r6
 8000a6e:	4615      	mov	r5, r2
 8000a70:	d1f7      	bne.n	8000a62 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a72:	2301      	movs	r3, #1
 8000a74:	f88d 3004 	strb.w	r3, [sp, #4]
 8000a78:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8000a7a:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000a7c:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8000a80:	d047      	beq.n	8000b12 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8000a82:	2c10      	cmp	r4, #16
 8000a84:	d017      	beq.n	8000ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8000a86:	2c01      	cmp	r4, #1
 8000a88:	d14f      	bne.n	8000b2a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000a8a:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8000a8e:	4a29      	ldr	r2, [pc, #164]	; (8000b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000a90:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000a92:	4019      	ands	r1, r3
 8000a94:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8000a98:	d044      	beq.n	8000b24 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000a9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000aa2:	d12d      	bne.n	8000b00 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8000aa4:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000aa8:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8000aaa:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8000aae:	bf08      	it	eq
 8000ab0:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 8000ab2:	b006      	add	sp, #24
 8000ab4:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8000ab6:	4b1f      	ldr	r3, [pc, #124]	; (8000b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000ab8:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8000aba:	6818      	ldr	r0, [r3, #0]
 8000abc:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8000ac0:	d0f7      	beq.n	8000ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000ac2:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8000ac6:	a806      	add	r0, sp, #24
 8000ac8:	4402      	add	r2, r0
 8000aca:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ace:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ad0:	bf41      	itttt	mi
 8000ad2:	685a      	ldrmi	r2, [r3, #4]
 8000ad4:	a906      	addmi	r1, sp, #24
 8000ad6:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8000ada:	1852      	addmi	r2, r2, r1
 8000adc:	bf44      	itt	mi
 8000ade:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8000ae2:	4a15      	ldrmi	r2, [pc, #84]	; (8000b38 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000ae4:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8000ae6:	bf4c      	ite	mi
 8000ae8:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000aec:	4a13      	ldrpl	r2, [pc, #76]	; (8000b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000aee:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000af0:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8000af4:	d4dd      	bmi.n	8000ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8000af6:	2303      	movs	r3, #3
 8000af8:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8000afa:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000afe:	e7d8      	b.n	8000ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8000b00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000b04:	d111      	bne.n	8000b2a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8000b06:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8000b08:	f24f 4024 	movw	r0, #62500	; 0xf424
 8000b0c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000b10:	e7cd      	b.n	8000aae <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8000b12:	f7ff fef9 	bl	8000908 <HAL_RCC_GetPCLK2Freq>
 8000b16:	4b07      	ldr	r3, [pc, #28]	; (8000b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8000b1e:	3301      	adds	r3, #1
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	e7ea      	b.n	8000afa <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8000b24:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b28:	e7c3      	b.n	8000ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	e7c1      	b.n	8000ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8000b2e:	bf00      	nop
 8000b30:	08001fd0 	.word	0x08001fd0
 8000b34:	40021000 	.word	0x40021000
 8000b38:	007a1200 	.word	0x007a1200
 8000b3c:	003d0900 	.word	0x003d0900

08000b40 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000b40:	6803      	ldr	r3, [r0, #0]
{
 8000b42:	b530      	push	{r4, r5, lr}
  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000b44:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8000b46:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8000b48:	6999      	ldr	r1, [r3, #24]

  if (high1 != high2)
 8000b4a:	b295      	uxth	r5, r2
 8000b4c:	b28c      	uxth	r4, r1
 8000b4e:	42a5      	cmp	r5, r4
  { /* In this case the counter roll over during reading of CNTL and CNTH registers, 
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8000b50:	bf1d      	ittte	ne
 8000b52:	69d8      	ldrne	r0, [r3, #28]
 8000b54:	b280      	uxthne	r0, r0
 8000b56:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
  }
  else
  { /* No counter roll over during reading of CNTL and CNTH registers, counter 
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8000b5a:	b280      	uxtheq	r0, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 8000b62:	bd30      	pop	{r4, r5, pc}

08000b64 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef* hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8000b64:	6803      	ldr	r3, [r0, #0]
 8000b66:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8000b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 8000b6a:	b29b      	uxth	r3, r3
}
 8000b6c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b70:	4770      	bx	lr

08000b72 <RTC_Bcd2ToByte>:
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
  return (tmp + (Value & (uint8_t)0x0F));
 8000b72:	220a      	movs	r2, #10
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8000b74:	0903      	lsrs	r3, r0, #4
  return (tmp + (Value & (uint8_t)0x0F));
 8000b76:	f000 000f 	and.w	r0, r0, #15
 8000b7a:	fb02 0003 	mla	r0, r2, r3, r0
}
 8000b7e:	b2c0      	uxtb	r0, r0
 8000b80:	4770      	bx	lr

08000b82 <RTC_WeekDayNum>:
{
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
  
  if(nMonth < 3U)
 8000b82:	2902      	cmp	r1, #2
{
 8000b84:	b570      	push	{r4, r5, r6, lr}
 8000b86:	f04f 0317 	mov.w	r3, #23
  year = 2000U + nYear;
 8000b8a:	f500 65fa 	add.w	r5, r0, #2000	; 0x7d0
 8000b8e:	f04f 0609 	mov.w	r6, #9
  if(nMonth < 3U)
 8000b92:	d81a      	bhi.n	8000bca <RTC_WeekDayNum+0x48>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + ((year-1U)/4U) - ((year-1U)/100U) + ((year-1U)/400U)) % 7U;
 8000b94:	434b      	muls	r3, r1
 8000b96:	f200 74cf 	addw	r4, r0, #1999	; 0x7cf
 8000b9a:	fbb3 f0f6 	udiv	r0, r3, r6
 8000b9e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000ba2:	fbb4 f3f3 	udiv	r3, r4, r3
 8000ba6:	3204      	adds	r2, #4
 8000ba8:	442a      	add	r2, r5
 8000baa:	4410      	add	r0, r2
 8000bac:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 8000bb0:	4418      	add	r0, r3
 8000bb2:	2364      	movs	r3, #100	; 0x64
 8000bb4:	fbb4 f4f3 	udiv	r4, r4, r3
 8000bb8:	1b00      	subs	r0, r0, r4
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 8000bba:	2307      	movs	r3, #7
 8000bbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bc0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8000bc4:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 8000bc6:	b2c0      	uxtb	r0, r0
 8000bc8:	bd70      	pop	{r4, r5, r6, pc}
    weekday = (((23U * nMonth)/9U) + nDay + 4U + year + (year/4U) - (year/100U) + (year/400U) - 2U ) % 7U; 
 8000bca:	fb03 f001 	mul.w	r0, r3, r1
 8000bce:	fbb0 f0f6 	udiv	r0, r0, r6
 8000bd2:	3202      	adds	r2, #2
 8000bd4:	442a      	add	r2, r5
 8000bd6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000bda:	4410      	add	r0, r2
 8000bdc:	2264      	movs	r2, #100	; 0x64
 8000bde:	fbb5 f3f3 	udiv	r3, r5, r3
 8000be2:	fbb5 f2f2 	udiv	r2, r5, r2
 8000be6:	eb00 0095 	add.w	r0, r0, r5, lsr #2
 8000bea:	4418      	add	r0, r3
 8000bec:	1a80      	subs	r0, r0, r2
 8000bee:	e7e4      	b.n	8000bba <RTC_WeekDayNum+0x38>

08000bf0 <RTC_EnterInitMode>:
{
 8000bf0:	b538      	push	{r3, r4, r5, lr}
 8000bf2:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8000bf4:	f7ff faca 	bl	800018c <HAL_GetTick>
 8000bf8:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8000bfa:	6823      	ldr	r3, [r4, #0]
 8000bfc:	685a      	ldr	r2, [r3, #4]
 8000bfe:	0692      	lsls	r2, r2, #26
 8000c00:	d505      	bpl.n	8000c0e <RTC_EnterInitMode+0x1e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000c02:	685a      	ldr	r2, [r3, #4]
  return HAL_OK;  
 8000c04:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000c06:	f042 0210 	orr.w	r2, r2, #16
 8000c0a:	605a      	str	r2, [r3, #4]
  return HAL_OK;  
 8000c0c:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8000c0e:	f7ff fabd 	bl	800018c <HAL_GetTick>
 8000c12:	1b40      	subs	r0, r0, r5
 8000c14:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c18:	d9ef      	bls.n	8000bfa <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 8000c1a:	2003      	movs	r0, #3
}
 8000c1c:	bd38      	pop	{r3, r4, r5, pc}

08000c1e <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c1e:	6802      	ldr	r2, [r0, #0]
{
 8000c20:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c22:	6853      	ldr	r3, [r2, #4]
{
 8000c24:	4604      	mov	r4, r0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c26:	f023 0310 	bic.w	r3, r3, #16
 8000c2a:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8000c2c:	f7ff faae 	bl	800018c <HAL_GetTick>
 8000c30:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8000c32:	6823      	ldr	r3, [r4, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	069b      	lsls	r3, r3, #26
 8000c38:	d501      	bpl.n	8000c3e <RTC_ExitInitMode+0x20>
  return HAL_OK;  
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8000c3e:	f7ff faa5 	bl	800018c <HAL_GetTick>
 8000c42:	1b40      	subs	r0, r0, r5
 8000c44:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c48:	d9f3      	bls.n	8000c32 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 8000c4a:	2003      	movs	r0, #3
}
 8000c4c:	bd38      	pop	{r3, r4, r5, pc}

08000c4e <RTC_WriteTimeCounter>:
{
 8000c4e:	b538      	push	{r3, r4, r5, lr}
 8000c50:	4605      	mov	r5, r0
 8000c52:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000c54:	f7ff ffcc 	bl	8000bf0 <RTC_EnterInitMode>
 8000c58:	b958      	cbnz	r0, 8000c72 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8000c5a:	682b      	ldr	r3, [r5, #0]
 8000c5c:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8000c5e:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8000c60:	619a      	str	r2, [r3, #24]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000c62:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8000c64:	61dc      	str	r4, [r3, #28]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000c66:	f7ff ffda 	bl	8000c1e <RTC_ExitInitMode>
    status = HAL_ERROR;
 8000c6a:	3000      	adds	r0, #0
 8000c6c:	bf18      	it	ne
 8000c6e:	2001      	movne	r0, #1
 8000c70:	bd38      	pop	{r3, r4, r5, pc}
 8000c72:	2001      	movs	r0, #1
}
 8000c74:	bd38      	pop	{r3, r4, r5, pc}

08000c76 <RTC_WriteAlarmCounter>:
{
 8000c76:	b538      	push	{r3, r4, r5, lr}
 8000c78:	4605      	mov	r5, r0
 8000c7a:	460c      	mov	r4, r1
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000c7c:	f7ff ffb8 	bl	8000bf0 <RTC_EnterInitMode>
 8000c80:	b958      	cbnz	r0, 8000c9a <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8000c82:	682b      	ldr	r3, [r5, #0]
 8000c84:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8000c86:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8000c88:	621a      	str	r2, [r3, #32]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000c8a:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8000c8c:	625c      	str	r4, [r3, #36]	; 0x24
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000c8e:	f7ff ffc6 	bl	8000c1e <RTC_ExitInitMode>
    status = HAL_ERROR;
 8000c92:	3000      	adds	r0, #0
 8000c94:	bf18      	it	ne
 8000c96:	2001      	movne	r0, #1
 8000c98:	bd38      	pop	{r3, r4, r5, pc}
 8000c9a:	2001      	movs	r0, #1
}
 8000c9c:	bd38      	pop	{r3, r4, r5, pc}

08000c9e <HAL_RTC_SetTime>:
{
 8000c9e:	b570      	push	{r4, r5, r6, lr}
  if((hrtc == NULL) || (sTime == NULL))
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	b1e0      	cbz	r0, 8000cde <HAL_RTC_SetTime+0x40>
 8000ca4:	b1d9      	cbz	r1, 8000cde <HAL_RTC_SetTime+0x40>
  __HAL_LOCK(hrtc);
 8000ca6:	7c03      	ldrb	r3, [r0, #16]
 8000ca8:	2602      	movs	r6, #2
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d046      	beq.n	8000d3c <HAL_RTC_SetTime+0x9e>
 8000cae:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8000cb0:	7446      	strb	r6, [r0, #17]
  __HAL_LOCK(hrtc);
 8000cb2:	7403      	strb	r3, [r0, #16]
 8000cb4:	7808      	ldrb	r0, [r1, #0]
 8000cb6:	784e      	ldrb	r6, [r1, #1]
 8000cb8:	7889      	ldrb	r1, [r1, #2]
  if(Format == RTC_FORMAT_BIN)
 8000cba:	b992      	cbnz	r2, 8000ce2 <HAL_RTC_SetTime+0x44>
                        ((uint32_t)sTime->Minutes * 60U) + \
 8000cbc:	253c      	movs	r5, #60	; 0x3c
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8000cbe:	f44f 6361 	mov.w	r3, #3600	; 0xe10
                        ((uint32_t)sTime->Minutes * 60U) + \
 8000cc2:	4375      	muls	r5, r6
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8000cc4:	fb03 5000 	mla	r0, r3, r0, r5
 8000cc8:	1845      	adds	r5, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8000cca:	4629      	mov	r1, r5
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f7ff ffbe 	bl	8000c4e <RTC_WriteTimeCounter>
 8000cd2:	4606      	mov	r6, r0
 8000cd4:	b1b0      	cbz	r0, 8000d04 <HAL_RTC_SetTime+0x66>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 8000cda:	2300      	movs	r3, #0
 8000cdc:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 8000cde:	2601      	movs	r6, #1
 8000ce0:	e02c      	b.n	8000d3c <HAL_RTC_SetTime+0x9e>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8000ce2:	f7ff ff46 	bl	8000b72 <RTC_Bcd2ToByte>
 8000ce6:	4605      	mov	r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8000ce8:	4630      	mov	r0, r6
 8000cea:	f7ff ff42 	bl	8000b72 <RTC_Bcd2ToByte>
 8000cee:	233c      	movs	r3, #60	; 0x3c
 8000cf0:	4358      	muls	r0, r3
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8000cf2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000cf6:	fb03 0505 	mla	r5, r3, r5, r0
              ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));   
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	f7ff ff39 	bl	8000b72 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8000d00:	4405      	add	r5, r0
 8000d02:	e7e2      	b.n	8000cca <HAL_RTC_SetTime+0x2c>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8000d04:	6822      	ldr	r2, [r4, #0]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000d06:	4620      	mov	r0, r4
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8000d08:	6853      	ldr	r3, [r2, #4]
 8000d0a:	f023 0305 	bic.w	r3, r3, #5
 8000d0e:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000d10:	f7ff ff28 	bl	8000b64 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8000d14:	1c43      	adds	r3, r0, #1
 8000d16:	d00d      	beq.n	8000d34 <HAL_RTC_SetTime+0x96>
      if(counter_alarm < counter_time)
 8000d18:	4285      	cmp	r5, r0
 8000d1a:	d90b      	bls.n	8000d34 <HAL_RTC_SetTime+0x96>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000d1c:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8000d20:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8000d24:	4620      	mov	r0, r4
 8000d26:	f7ff ffa6 	bl	8000c76 <RTC_WriteAlarmCounter>
 8000d2a:	b118      	cbz	r0, 8000d34 <HAL_RTC_SetTime+0x96>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000d2c:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8000d2e:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000d30:	7463      	strb	r3, [r4, #17]
 8000d32:	e7d4      	b.n	8000cde <HAL_RTC_SetTime+0x40>
    hrtc->State = HAL_RTC_STATE_READY;
 8000d34:	2301      	movs	r3, #1
 8000d36:	7463      	strb	r3, [r4, #17]
   __HAL_UNLOCK(hrtc); 
 8000d38:	2300      	movs	r3, #0
 8000d3a:	7423      	strb	r3, [r4, #16]
}
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	bd70      	pop	{r4, r5, r6, pc}

08000d40 <HAL_RTC_SetDate>:
{
 8000d40:	b570      	push	{r4, r5, r6, lr}
 8000d42:	460d      	mov	r5, r1
  if((hrtc == NULL) || (sDate == NULL))
 8000d44:	4604      	mov	r4, r0
 8000d46:	b358      	cbz	r0, 8000da0 <HAL_RTC_SetDate+0x60>
 8000d48:	b351      	cbz	r1, 8000da0 <HAL_RTC_SetDate+0x60>
 __HAL_LOCK(hrtc);
 8000d4a:	7c03      	ldrb	r3, [r0, #16]
 8000d4c:	2002      	movs	r0, #2
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d027      	beq.n	8000da2 <HAL_RTC_SetDate+0x62>
 8000d52:	2301      	movs	r3, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8000d54:	7460      	strb	r0, [r4, #17]
 __HAL_LOCK(hrtc);
 8000d56:	7423      	strb	r3, [r4, #16]
 8000d58:	78c8      	ldrb	r0, [r1, #3]
  if(Format == RTC_FORMAT_BIN)
 8000d5a:	bb1a      	cbnz	r2, 8000da4 <HAL_RTC_SetDate+0x64>
    hrtc->DateToUpdate.Year  = sDate->Year;
 8000d5c:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8000d5e:	784b      	ldrb	r3, [r1, #1]
 8000d60:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8000d62:	788b      	ldrb	r3, [r1, #2]
 8000d64:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8000d66:	7ba2      	ldrb	r2, [r4, #14]
 8000d68:	7b61      	ldrb	r1, [r4, #13]
 8000d6a:	7be0      	ldrb	r0, [r4, #15]
 8000d6c:	f7ff ff09 	bl	8000b82 <RTC_WeekDayNum>
 8000d70:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8000d72:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8000d74:	4620      	mov	r0, r4
 8000d76:	f7ff fee3 	bl	8000b40 <RTC_ReadTimeCounter>
  if (hours > 24U)
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <HAL_RTC_SetDate+0xac>)
 8000d7c:	4298      	cmp	r0, r3
 8000d7e:	d930      	bls.n	8000de2 <HAL_RTC_SetDate+0xa2>
 8000d80:	f6a3 630f 	subw	r3, r3, #3599	; 0xe0f
 8000d84:	fbb0 f5f3 	udiv	r5, r0, r3
 8000d88:	fb03 0515 	mls	r5, r3, r5, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	4629      	mov	r1, r5
 8000d90:	f7ff ff5d 	bl	8000c4e <RTC_WriteTimeCounter>
 8000d94:	4606      	mov	r6, r0
 8000d96:	b188      	cbz	r0, 8000dbc <HAL_RTC_SetDate+0x7c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8000d98:	2304      	movs	r3, #4
 8000d9a:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	7423      	strb	r3, [r4, #16]
     return HAL_ERROR;
 8000da0:	2001      	movs	r0, #1
}
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8000da4:	f7ff fee5 	bl	8000b72 <RTC_Bcd2ToByte>
 8000da8:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8000daa:	7848      	ldrb	r0, [r1, #1]
 8000dac:	f7ff fee1 	bl	8000b72 <RTC_Bcd2ToByte>
 8000db0:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8000db2:	7888      	ldrb	r0, [r1, #2]
 8000db4:	f7ff fedd 	bl	8000b72 <RTC_Bcd2ToByte>
 8000db8:	73a0      	strb	r0, [r4, #14]
 8000dba:	e7d4      	b.n	8000d66 <HAL_RTC_SetDate+0x26>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f7ff fed1 	bl	8000b64 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8000dc2:	1c43      	adds	r3, r0, #1
 8000dc4:	d00d      	beq.n	8000de2 <HAL_RTC_SetDate+0xa2>
      if(counter_alarm < counter_time)
 8000dc6:	4285      	cmp	r5, r0
 8000dc8:	d90b      	bls.n	8000de2 <HAL_RTC_SetDate+0xa2>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8000dca:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8000dce:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8000dd2:	4620      	mov	r0, r4
 8000dd4:	f7ff ff4f 	bl	8000c76 <RTC_WriteAlarmCounter>
 8000dd8:	b118      	cbz	r0, 8000de2 <HAL_RTC_SetDate+0xa2>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000dda:	2304      	movs	r3, #4
          __HAL_UNLOCK(hrtc);
 8000ddc:	7426      	strb	r6, [r4, #16]
          hrtc->State = HAL_RTC_STATE_ERROR;
 8000dde:	7463      	strb	r3, [r4, #17]
 8000de0:	e7de      	b.n	8000da0 <HAL_RTC_SetDate+0x60>
  hrtc->State = HAL_RTC_STATE_READY ;
 8000de2:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8000de4:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8000de6:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8000de8:	7420      	strb	r0, [r4, #16]
  return HAL_OK;    
 8000dea:	bd70      	pop	{r4, r5, r6, pc}
 8000dec:	00015f8f 	.word	0x00015f8f

08000df0 <HAL_RTC_WaitForSynchro>:
{
 8000df0:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 8000df2:	4604      	mov	r4, r0
 8000df4:	b1a8      	cbz	r0, 8000e22 <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8000df6:	6802      	ldr	r2, [r0, #0]
 8000df8:	6853      	ldr	r3, [r2, #4]
 8000dfa:	f023 0308 	bic.w	r3, r3, #8
 8000dfe:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8000e00:	f7ff f9c4 	bl	800018c <HAL_GetTick>
 8000e04:	4605      	mov	r5, r0
  while((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8000e06:	6823      	ldr	r3, [r4, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	071b      	lsls	r3, r3, #28
 8000e0c:	d501      	bpl.n	8000e12 <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8000e0e:	2000      	movs	r0, #0
 8000e10:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) >  RTC_TIMEOUT_VALUE)
 8000e12:	f7ff f9bb 	bl	800018c <HAL_GetTick>
 8000e16:	1b40      	subs	r0, r0, r5
 8000e18:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000e1c:	d9f3      	bls.n	8000e06 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8000e1e:	2003      	movs	r0, #3
}
 8000e20:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8000e22:	2001      	movs	r0, #1
 8000e24:	bd38      	pop	{r3, r4, r5, pc}
	...

08000e28 <HAL_RTC_Init>:
{
 8000e28:	b510      	push	{r4, lr}
  if(hrtc == NULL)
 8000e2a:	4604      	mov	r4, r0
 8000e2c:	b170      	cbz	r0, 8000e4c <HAL_RTC_Init+0x24>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8000e2e:	7c43      	ldrb	r3, [r0, #17]
 8000e30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e34:	b913      	cbnz	r3, 8000e3c <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8000e36:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8000e38:	f000 ffd8 	bl	8001dec <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8000e3c:	2302      	movs	r3, #2
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8000e3e:	4620      	mov	r0, r4
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8000e40:	7463      	strb	r3, [r4, #17]
  if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8000e42:	f7ff ffd5 	bl	8000df0 <HAL_RTC_WaitForSynchro>
 8000e46:	b118      	cbz	r0, 8000e50 <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	7463      	strb	r3, [r4, #17]
     return HAL_ERROR;
 8000e4c:	2001      	movs	r0, #1
}
 8000e4e:	bd10      	pop	{r4, pc}
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000e50:	4620      	mov	r0, r4
 8000e52:	f7ff fecd 	bl	8000bf0 <RTC_EnterInitMode>
 8000e56:	2800      	cmp	r0, #0
 8000e58:	d1f6      	bne.n	8000e48 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8000e5a:	6822      	ldr	r2, [r4, #0]
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8000e5c:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8000e5e:	6853      	ldr	r3, [r2, #4]
 8000e60:	f023 0307 	bic.w	r3, r3, #7
 8000e64:	6053      	str	r3, [r2, #4]
 8000e66:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <HAL_RTC_Init+0x9c>)
    if(hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8000e68:	b118      	cbz	r0, 8000e72 <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8000e6a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000e6c:	f021 0101 	bic.w	r1, r1, #1
 8000e70:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8000e72:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000e74:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8000e78:	4303      	orrs	r3, r0
 8000e7a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8000e7c:	6860      	ldr	r0, [r4, #4]
 8000e7e:	1c43      	adds	r3, r0, #1
 8000e80:	d105      	bne.n	8000e8e <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8000e82:	2001      	movs	r0, #1
 8000e84:	f7ff fde6 	bl	8000a54 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	d0dd      	beq.n	8000e48 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8000e8c:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8000e8e:	6822      	ldr	r2, [r4, #0]
 8000e90:	6893      	ldr	r3, [r2, #8]
 8000e92:	f023 030f 	bic.w	r3, r3, #15
 8000e96:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8000e9a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8000e9c:	68d3      	ldr	r3, [r2, #12]
 8000e9e:	b280      	uxth	r0, r0
 8000ea0:	0c1b      	lsrs	r3, r3, #16
 8000ea2:	041b      	lsls	r3, r3, #16
 8000ea4:	4318      	orrs	r0, r3
 8000ea6:	60d0      	str	r0, [r2, #12]
    if(RTC_ExitInitMode(hrtc) != HAL_OK)
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	f7ff feb8 	bl	8000c1e <RTC_ExitInitMode>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	b110      	cbz	r0, 8000eb8 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	7462      	strb	r2, [r4, #17]
 8000eb6:	e7c9      	b.n	8000e4c <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Year = 0x00U;
 8000eb8:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000eba:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8000ebc:	73a3      	strb	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8000ebe:	7463      	strb	r3, [r4, #17]
    return HAL_OK;
 8000ec0:	bd10      	pop	{r4, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40006c00 	.word	0x40006c00

08000ec8 <HAL_TIM_Base_MspInit>:
 8000ec8:	4770      	bx	lr

08000eca <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000eca:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8000ecc:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000ece:	68da      	ldr	r2, [r3, #12]
 8000ed0:	f042 0201 	orr.w	r2, r2, #1
 8000ed4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	f042 0201 	orr.w	r2, r2, #1
 8000edc:	601a      	str	r2, [r3, #0]
}
 8000ede:	4770      	bx	lr

08000ee0 <HAL_TIM_OC_DelayElapsedCallback>:
 8000ee0:	4770      	bx	lr

08000ee2 <HAL_TIM_IC_CaptureCallback>:
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000ee4:	4770      	bx	lr

08000ee6 <HAL_TIM_TriggerCallback>:
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ee8:	6803      	ldr	r3, [r0, #0]
{
 8000eea:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000eec:	691a      	ldr	r2, [r3, #16]
{
 8000eee:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000ef0:	0791      	lsls	r1, r2, #30
 8000ef2:	d50e      	bpl.n	8000f12 <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000ef4:	68da      	ldr	r2, [r3, #12]
 8000ef6:	0792      	lsls	r2, r2, #30
 8000ef8:	d50b      	bpl.n	8000f12 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000efa:	f06f 0202 	mvn.w	r2, #2
 8000efe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f00:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f02:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000f04:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000f06:	079b      	lsls	r3, r3, #30
 8000f08:	d077      	beq.n	8000ffa <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000f0a:	f7ff ffea 	bl	8000ee2 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000f12:	6823      	ldr	r3, [r4, #0]
 8000f14:	691a      	ldr	r2, [r3, #16]
 8000f16:	0750      	lsls	r0, r2, #29
 8000f18:	d510      	bpl.n	8000f3c <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000f1a:	68da      	ldr	r2, [r3, #12]
 8000f1c:	0751      	lsls	r1, r2, #29
 8000f1e:	d50d      	bpl.n	8000f3c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000f20:	f06f 0204 	mvn.w	r2, #4
 8000f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f26:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f28:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000f2a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f2c:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000f30:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000f32:	d068      	beq.n	8001006 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f34:	f7ff ffd5 	bl	8000ee2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000f3c:	6823      	ldr	r3, [r4, #0]
 8000f3e:	691a      	ldr	r2, [r3, #16]
 8000f40:	0712      	lsls	r2, r2, #28
 8000f42:	d50f      	bpl.n	8000f64 <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	0710      	lsls	r0, r2, #28
 8000f48:	d50c      	bpl.n	8000f64 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000f4a:	f06f 0208 	mvn.w	r2, #8
 8000f4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000f50:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f52:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000f54:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f56:	0799      	lsls	r1, r3, #30
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000f58:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000f5a:	d05a      	beq.n	8001012 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f5c:	f7ff ffc1 	bl	8000ee2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f60:	2300      	movs	r3, #0
 8000f62:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000f64:	6823      	ldr	r3, [r4, #0]
 8000f66:	691a      	ldr	r2, [r3, #16]
 8000f68:	06d2      	lsls	r2, r2, #27
 8000f6a:	d510      	bpl.n	8000f8e <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	06d0      	lsls	r0, r2, #27
 8000f70:	d50d      	bpl.n	8000f8e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000f72:	f06f 0210 	mvn.w	r2, #16
 8000f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000f78:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f7a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000f7c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f7e:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000f82:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f84:	d04b      	beq.n	800101e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f86:	f7ff ffac 	bl	8000ee2 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	691a      	ldr	r2, [r3, #16]
 8000f92:	07d1      	lsls	r1, r2, #31
 8000f94:	d508      	bpl.n	8000fa8 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	07d2      	lsls	r2, r2, #31
 8000f9a:	d505      	bpl.n	8000fa8 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000f9c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8000fa0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000fa2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000fa4:	f000 fef0 	bl	8001d88 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000fa8:	6823      	ldr	r3, [r4, #0]
 8000faa:	691a      	ldr	r2, [r3, #16]
 8000fac:	0610      	lsls	r0, r2, #24
 8000fae:	d508      	bpl.n	8000fc2 <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000fb0:	68da      	ldr	r2, [r3, #12]
 8000fb2:	0611      	lsls	r1, r2, #24
 8000fb4:	d505      	bpl.n	8000fc2 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000fb6:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8000fba:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000fbc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000fbe:	f000 f888 	bl	80010d2 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000fc2:	6823      	ldr	r3, [r4, #0]
 8000fc4:	691a      	ldr	r2, [r3, #16]
 8000fc6:	0652      	lsls	r2, r2, #25
 8000fc8:	d508      	bpl.n	8000fdc <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000fca:	68da      	ldr	r2, [r3, #12]
 8000fcc:	0650      	lsls	r0, r2, #25
 8000fce:	d505      	bpl.n	8000fdc <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000fd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8000fd4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000fd6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000fd8:	f7ff ff85 	bl	8000ee6 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000fdc:	6823      	ldr	r3, [r4, #0]
 8000fde:	691a      	ldr	r2, [r3, #16]
 8000fe0:	0691      	lsls	r1, r2, #26
 8000fe2:	d522      	bpl.n	800102a <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	0692      	lsls	r2, r2, #26
 8000fe8:	d51f      	bpl.n	800102a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000fea:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000fee:	4620      	mov	r0, r4
    }
  }
}
 8000ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000ff4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000ff6:	f000 b86b 	b.w	80010d0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ffa:	f7ff ff71 	bl	8000ee0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ffe:	4620      	mov	r0, r4
 8001000:	f7ff ff70 	bl	8000ee4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001004:	e783      	b.n	8000f0e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001006:	f7ff ff6b 	bl	8000ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800100a:	4620      	mov	r0, r4
 800100c:	f7ff ff6a 	bl	8000ee4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001010:	e792      	b.n	8000f38 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001012:	f7ff ff65 	bl	8000ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001016:	4620      	mov	r0, r4
 8001018:	f7ff ff64 	bl	8000ee4 <HAL_TIM_PWM_PulseFinishedCallback>
 800101c:	e7a0      	b.n	8000f60 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800101e:	f7ff ff5f 	bl	8000ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001022:	4620      	mov	r0, r4
 8001024:	f7ff ff5e 	bl	8000ee4 <HAL_TIM_PWM_PulseFinishedCallback>
 8001028:	e7af      	b.n	8000f8a <HAL_TIM_IRQHandler+0xa2>
 800102a:	bd10      	pop	{r4, pc}

0800102c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800102c:	4a1a      	ldr	r2, [pc, #104]	; (8001098 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800102e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001030:	4290      	cmp	r0, r2
 8001032:	d00a      	beq.n	800104a <TIM_Base_SetConfig+0x1e>
 8001034:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001038:	d007      	beq.n	800104a <TIM_Base_SetConfig+0x1e>
 800103a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800103e:	4290      	cmp	r0, r2
 8001040:	d003      	beq.n	800104a <TIM_Base_SetConfig+0x1e>
 8001042:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001046:	4290      	cmp	r0, r2
 8001048:	d115      	bne.n	8001076 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800104a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800104c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001050:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001052:	4a11      	ldr	r2, [pc, #68]	; (8001098 <TIM_Base_SetConfig+0x6c>)
 8001054:	4290      	cmp	r0, r2
 8001056:	d00a      	beq.n	800106e <TIM_Base_SetConfig+0x42>
 8001058:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800105c:	d007      	beq.n	800106e <TIM_Base_SetConfig+0x42>
 800105e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001062:	4290      	cmp	r0, r2
 8001064:	d003      	beq.n	800106e <TIM_Base_SetConfig+0x42>
 8001066:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800106a:	4290      	cmp	r0, r2
 800106c:	d103      	bne.n	8001076 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800106e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001074:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001076:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001078:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800107c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800107e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001080:	688b      	ldr	r3, [r1, #8]
 8001082:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001084:	680b      	ldr	r3, [r1, #0]
 8001086:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <TIM_Base_SetConfig+0x6c>)
 800108a:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800108c:	bf04      	itt	eq
 800108e:	690b      	ldreq	r3, [r1, #16]
 8001090:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001092:	2301      	movs	r3, #1
 8001094:	6143      	str	r3, [r0, #20]
 8001096:	4770      	bx	lr
 8001098:	40012c00 	.word	0x40012c00

0800109c <HAL_TIM_Base_Init>:
{
 800109c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800109e:	4604      	mov	r4, r0
 80010a0:	b1a0      	cbz	r0, 80010cc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80010a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80010a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80010aa:	b91b      	cbnz	r3, 80010b4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80010ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80010b0:	f7ff ff0a 	bl	8000ec8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80010b4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010b6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80010b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010bc:	1d21      	adds	r1, r4, #4
 80010be:	f7ff ffb5 	bl	800102c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80010c2:	2301      	movs	r3, #1
  return HAL_OK;
 80010c4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80010c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80010ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80010cc:	2001      	movs	r0, #1
}
 80010ce:	bd10      	pop	{r4, pc}

080010d0 <HAL_TIMEx_CommutationCallback>:
 80010d0:	4770      	bx	lr

080010d2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80010d2:	4770      	bx	lr

080010d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80010d4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80010d6:	f000 fb93 	bl	8001800 <vTaskStartScheduler>
  
  return osOK;
}
 80010da:	2000      	movs	r0, #0
 80010dc:	bd08      	pop	{r3, pc}

080010de <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80010de:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80010e0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 80010e4:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 80010e6:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80010e8:	bf08      	it	eq
 80010ea:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80010ec:	8a02      	ldrh	r2, [r0, #16]
    fpriority += (priority - osPriorityIdle);
 80010ee:	bf18      	it	ne
 80010f0:	3403      	addne	r4, #3
{
 80010f2:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80010f4:	e890 0022 	ldmia.w	r0, {r1, r5}
 80010f8:	a803      	add	r0, sp, #12
 80010fa:	9001      	str	r0, [sp, #4]
 80010fc:	9400      	str	r4, [sp, #0]
 80010fe:	4628      	mov	r0, r5
 8001100:	f000 faae 	bl	8001660 <xTaskCreate>
 8001104:	2801      	cmp	r0, #1
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 8001106:	bf14      	ite	ne
 8001108:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
 800110a:	9803      	ldreq	r0, [sp, #12]
}
 800110c:	b005      	add	sp, #20
 800110e:	bd30      	pop	{r4, r5, pc}

08001110 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001110:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001112:	2800      	cmp	r0, #0
 8001114:	bf08      	it	eq
 8001116:	2001      	moveq	r0, #1
 8001118:	f000 fcc0 	bl	8001a9c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800111c:	2000      	movs	r0, #0
 800111e:	bd08      	pop	{r3, pc}

08001120 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001120:	f100 0308 	add.w	r3, r0, #8
 8001124:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001126:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800112a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800112c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800112e:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001130:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001132:	6003      	str	r3, [r0, #0]
 8001134:	4770      	bx	lr

08001136 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001136:	2300      	movs	r3, #0
 8001138:	6103      	str	r3, [r0, #16]
 800113a:	4770      	bx	lr

0800113c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800113c:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800113e:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8001140:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001142:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001148:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800114a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800114c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800114e:	3301      	adds	r3, #1
 8001150:	6003      	str	r3, [r0, #0]
 8001152:	4770      	bx	lr

08001154 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001154:	680a      	ldr	r2, [r1, #0]
{
 8001156:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001158:	1c53      	adds	r3, r2, #1
 800115a:	d10a      	bne.n	8001172 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800115c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001162:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001164:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001166:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001168:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800116a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800116c:	3301      	adds	r3, #1
 800116e:	6003      	str	r3, [r0, #0]
 8001170:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001172:	f100 0308 	add.w	r3, r0, #8
 8001176:	685c      	ldr	r4, [r3, #4]
 8001178:	6825      	ldr	r5, [r4, #0]
 800117a:	42aa      	cmp	r2, r5
 800117c:	d3ef      	bcc.n	800115e <vListInsert+0xa>
 800117e:	4623      	mov	r3, r4
 8001180:	e7f9      	b.n	8001176 <vListInsert+0x22>

08001182 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001182:	6841      	ldr	r1, [r0, #4]
 8001184:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001186:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001188:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800118a:	6882      	ldr	r2, [r0, #8]
 800118c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800118e:	6859      	ldr	r1, [r3, #4]
 8001190:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001192:	bf08      	it	eq
 8001194:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001196:	2200      	movs	r2, #0
 8001198:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	3801      	subs	r0, #1
 800119e:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80011a0:	4770      	bx	lr
	...

080011a4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <prvTaskExitError+0x2c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	3301      	adds	r3, #1
 80011aa:	d008      	beq.n	80011be <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80011ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b0:	f383 8811 	msr	BASEPRI, r3
 80011b4:	f3bf 8f6f 	isb	sy
 80011b8:	f3bf 8f4f 	dsb	sy
 80011bc:	e7fe      	b.n	80011bc <prvTaskExitError+0x18>
 80011be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011c2:	f383 8811 	msr	BASEPRI, r3
 80011c6:	f3bf 8f6f 	isb	sy
 80011ca:	f3bf 8f4f 	dsb	sy
 80011ce:	e7fe      	b.n	80011ce <prvTaskExitError+0x2a>
 80011d0:	20000004 	.word	0x20000004

080011d4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80011d4:	4806      	ldr	r0, [pc, #24]	; (80011f0 <prvPortStartFirstTask+0x1c>)
 80011d6:	6800      	ldr	r0, [r0, #0]
 80011d8:	6800      	ldr	r0, [r0, #0]
 80011da:	f380 8808 	msr	MSP, r0
 80011de:	b662      	cpsie	i
 80011e0:	b661      	cpsie	f
 80011e2:	f3bf 8f4f 	dsb	sy
 80011e6:	f3bf 8f6f 	isb	sy
 80011ea:	df00      	svc	0
 80011ec:	bf00      	nop
 80011ee:	0000      	.short	0x0000
 80011f0:	e000ed08 	.word	0xe000ed08

080011f4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80011f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011f8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80011fe:	f021 0101 	bic.w	r1, r1, #1
 8001202:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001206:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800120a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800120e:	3840      	subs	r0, #64	; 0x40
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	080011a5 	.word	0x080011a5
	...

08001220 <SVC_Handler>:
	__asm volatile (
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <pxCurrentTCBConst2>)
 8001222:	6819      	ldr	r1, [r3, #0]
 8001224:	6808      	ldr	r0, [r1, #0]
 8001226:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800122a:	f380 8809 	msr	PSP, r0
 800122e:	f3bf 8f6f 	isb	sy
 8001232:	f04f 0000 	mov.w	r0, #0
 8001236:	f380 8811 	msr	BASEPRI, r0
 800123a:	f04e 0e0d 	orr.w	lr, lr, #13
 800123e:	4770      	bx	lr

08001240 <pxCurrentTCBConst2>:
 8001240:	20000c48 	.word	0x20000c48

08001244 <vPortEnterCritical>:
 8001244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001248:	f383 8811 	msr	BASEPRI, r3
 800124c:	f3bf 8f6f 	isb	sy
 8001250:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001254:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <vPortEnterCritical+0x3c>)
 8001256:	6813      	ldr	r3, [r2, #0]
 8001258:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800125a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800125c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800125e:	d10d      	bne.n	800127c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <vPortEnterCritical+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001268:	d008      	beq.n	800127c <vPortEnterCritical+0x38>
 800126a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800126e:	f383 8811 	msr	BASEPRI, r3
 8001272:	f3bf 8f6f 	isb	sy
 8001276:	f3bf 8f4f 	dsb	sy
 800127a:	e7fe      	b.n	800127a <vPortEnterCritical+0x36>
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000004 	.word	0x20000004
 8001284:	e000ed04 	.word	0xe000ed04

08001288 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8001288:	4a08      	ldr	r2, [pc, #32]	; (80012ac <vPortExitCritical+0x24>)
 800128a:	6813      	ldr	r3, [r2, #0]
 800128c:	b943      	cbnz	r3, 80012a0 <vPortExitCritical+0x18>
 800128e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001292:	f383 8811 	msr	BASEPRI, r3
 8001296:	f3bf 8f6f 	isb	sy
 800129a:	f3bf 8f4f 	dsb	sy
 800129e:	e7fe      	b.n	800129e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80012a0:	3b01      	subs	r3, #1
 80012a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80012a4:	b90b      	cbnz	r3, 80012aa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80012a6:	f383 8811 	msr	BASEPRI, r3
 80012aa:	4770      	bx	lr
 80012ac:	20000004 	.word	0x20000004

080012b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80012b0:	f3ef 8009 	mrs	r0, PSP
 80012b4:	f3bf 8f6f 	isb	sy
 80012b8:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <pxCurrentTCBConst>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80012c0:	6010      	str	r0, [r2, #0]
 80012c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80012c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80012ca:	f380 8811 	msr	BASEPRI, r0
 80012ce:	f000 fc43 	bl	8001b58 <vTaskSwitchContext>
 80012d2:	f04f 0000 	mov.w	r0, #0
 80012d6:	f380 8811 	msr	BASEPRI, r0
 80012da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80012de:	6819      	ldr	r1, [r3, #0]
 80012e0:	6808      	ldr	r0, [r1, #0]
 80012e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80012e6:	f380 8809 	msr	PSP, r0
 80012ea:	f3bf 8f6f 	isb	sy
 80012ee:	4770      	bx	lr

080012f0 <pxCurrentTCBConst>:
 80012f0:	20000c48 	.word	0x20000c48

080012f4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80012f4:	b508      	push	{r3, lr}
	__asm volatile
 80012f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012fa:	f383 8811 	msr	BASEPRI, r3
 80012fe:	f3bf 8f6f 	isb	sy
 8001302:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001306:	f000 fabf 	bl	8001888 <xTaskIncrementTick>
 800130a:	b118      	cbz	r0, 8001314 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800130c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001310:	4b02      	ldr	r3, [pc, #8]	; (800131c <SysTick_Handler+0x28>)
 8001312:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001314:	2300      	movs	r3, #0
 8001316:	f383 8811 	msr	BASEPRI, r3
 800131a:	bd08      	pop	{r3, pc}
 800131c:	e000ed04 	.word	0xe000ed04

08001320 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <vPortSetupTimerInterrupt+0x1c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	fbb3 f3f2 	udiv	r3, r3, r2
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <vPortSetupTimerInterrupt+0x20>)
 800132e:	3b01      	subs	r3, #1
 8001330:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001332:	2207      	movs	r2, #7
 8001334:	4b03      	ldr	r3, [pc, #12]	; (8001344 <vPortSetupTimerInterrupt+0x24>)
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000008 	.word	0x20000008
 8001340:	e000e014 	.word	0xe000e014
 8001344:	e000e010 	.word	0xe000e010

08001348 <xPortStartScheduler>:
{
 8001348:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800134a:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800134c:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800134e:	781a      	ldrb	r2, [r3, #0]
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001354:	22ff      	movs	r2, #255	; 0xff
 8001356:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001358:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800135a:	4a1c      	ldr	r2, [pc, #112]	; (80013cc <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800135c:	b2db      	uxtb	r3, r3
 800135e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001362:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001366:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800136a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800136c:	2207      	movs	r2, #7
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <xPortStartScheduler+0x88>)
 8001370:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001372:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001376:	1e54      	subs	r4, r2, #1
 8001378:	0600      	lsls	r0, r0, #24
 800137a:	d41c      	bmi.n	80013b6 <xPortStartScheduler+0x6e>
 800137c:	b101      	cbz	r1, 8001380 <xPortStartScheduler+0x38>
 800137e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001384:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001388:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800138a:	9b01      	ldr	r3, [sp, #4]
 800138c:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <xPortStartScheduler+0x80>)
 800138e:	b2db      	uxtb	r3, r3
 8001390:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <xPortStartScheduler+0x8c>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800139a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80013a2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80013a4:	f7ff ffbc 	bl	8001320 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80013a8:	2200      	movs	r2, #0
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <xPortStartScheduler+0x90>)
 80013ac:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 80013ae:	f7ff ff11 	bl	80011d4 <prvPortStartFirstTask>
	prvTaskExitError();
 80013b2:	f7ff fef7 	bl	80011a4 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80013b6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80013ba:	2101      	movs	r1, #1
 80013bc:	0052      	lsls	r2, r2, #1
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	f88d 2003 	strb.w	r2, [sp, #3]
 80013c4:	4622      	mov	r2, r4
 80013c6:	e7d4      	b.n	8001372 <xPortStartScheduler+0x2a>
 80013c8:	e000e400 	.word	0xe000e400
 80013cc:	20000028 	.word	0x20000028
 80013d0:	2000002c 	.word	0x2000002c
 80013d4:	e000ed20 	.word	0xe000ed20
 80013d8:	20000004 	.word	0x20000004

080013dc <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80013dc:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <prvInsertBlockIntoFreeList+0x40>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	4282      	cmp	r2, r0
 80013e4:	d318      	bcc.n	8001418 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013e6:	685c      	ldr	r4, [r3, #4]
 80013e8:	1919      	adds	r1, r3, r4
 80013ea:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013ec:	bf01      	itttt	eq
 80013ee:	6841      	ldreq	r1, [r0, #4]
 80013f0:	4618      	moveq	r0, r3
 80013f2:	1909      	addeq	r1, r1, r4
 80013f4:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013f6:	6844      	ldr	r4, [r0, #4]
 80013f8:	1901      	adds	r1, r0, r4
 80013fa:	428a      	cmp	r2, r1
 80013fc:	d107      	bne.n	800140e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013fe:	4908      	ldr	r1, [pc, #32]	; (8001420 <prvInsertBlockIntoFreeList+0x44>)
 8001400:	6809      	ldr	r1, [r1, #0]
 8001402:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001404:	bf1f      	itttt	ne
 8001406:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001408:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800140a:	1909      	addne	r1, r1, r4
 800140c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800140e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001410:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001412:	bf18      	it	ne
 8001414:	6018      	strne	r0, [r3, #0]
 8001416:	bd10      	pop	{r4, pc}
 8001418:	4613      	mov	r3, r2
 800141a:	e7e1      	b.n	80013e0 <prvInsertBlockIntoFreeList+0x4>
 800141c:	20000c40 	.word	0x20000c40
 8001420:	20000030 	.word	0x20000030

08001424 <pvPortMalloc>:
{
 8001424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001428:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800142a:	f000 fa25 	bl	8001878 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800142e:	493e      	ldr	r1, [pc, #248]	; (8001528 <pvPortMalloc+0x104>)
 8001430:	4d3e      	ldr	r5, [pc, #248]	; (800152c <pvPortMalloc+0x108>)
 8001432:	680b      	ldr	r3, [r1, #0]
 8001434:	bb0b      	cbnz	r3, 800147a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001436:	4a3e      	ldr	r2, [pc, #248]	; (8001530 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001438:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800143a:	bf1d      	ittte	ne
 800143c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800143e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001442:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001446:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800144a:	bf1c      	itt	ne
 800144c:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800144e:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 8001450:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001452:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001454:	4e37      	ldr	r6, [pc, #220]	; (8001534 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8001456:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001458:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800145c:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800145e:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001460:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001462:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8001464:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001466:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001468:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800146a:	4b33      	ldr	r3, [pc, #204]	; (8001538 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800146c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800146e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001470:	4b32      	ldr	r3, [pc, #200]	; (800153c <pvPortMalloc+0x118>)
 8001472:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001474:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001478:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800147a:	682f      	ldr	r7, [r5, #0]
 800147c:	4227      	tst	r7, r4
 800147e:	d116      	bne.n	80014ae <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001480:	2c00      	cmp	r4, #0
 8001482:	d040      	beq.n	8001506 <pvPortMalloc+0xe2>
				xWantedSize += xHeapStructSize;
 8001484:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001488:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800148a:	bf1c      	itt	ne
 800148c:	f023 0307 	bicne.w	r3, r3, #7
 8001490:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001492:	b163      	cbz	r3, 80014ae <pvPortMalloc+0x8a>
 8001494:	4a29      	ldr	r2, [pc, #164]	; (800153c <pvPortMalloc+0x118>)
 8001496:	6816      	ldr	r6, [r2, #0]
 8001498:	4690      	mov	r8, r2
 800149a:	42b3      	cmp	r3, r6
 800149c:	d807      	bhi.n	80014ae <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800149e:	4a25      	ldr	r2, [pc, #148]	; (8001534 <pvPortMalloc+0x110>)
 80014a0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80014a2:	6868      	ldr	r0, [r5, #4]
 80014a4:	4283      	cmp	r3, r0
 80014a6:	d804      	bhi.n	80014b2 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80014a8:	6809      	ldr	r1, [r1, #0]
 80014aa:	428d      	cmp	r5, r1
 80014ac:	d107      	bne.n	80014be <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80014ae:	2400      	movs	r4, #0
 80014b0:	e029      	b.n	8001506 <pvPortMalloc+0xe2>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80014b2:	682c      	ldr	r4, [r5, #0]
 80014b4:	2c00      	cmp	r4, #0
 80014b6:	d0f7      	beq.n	80014a8 <pvPortMalloc+0x84>
 80014b8:	462a      	mov	r2, r5
 80014ba:	4625      	mov	r5, r4
 80014bc:	e7f1      	b.n	80014a2 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80014be:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80014c0:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80014c2:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80014c4:	1ac2      	subs	r2, r0, r3
 80014c6:	2a10      	cmp	r2, #16
 80014c8:	d90f      	bls.n	80014ea <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80014ca:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80014cc:	0741      	lsls	r1, r0, #29
 80014ce:	d008      	beq.n	80014e2 <pvPortMalloc+0xbe>
	__asm volatile
 80014d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014d4:	f383 8811 	msr	BASEPRI, r3
 80014d8:	f3bf 8f6f 	isb	sy
 80014dc:	f3bf 8f4f 	dsb	sy
 80014e0:	e7fe      	b.n	80014e0 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80014e2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80014e4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80014e6:	f7ff ff79 	bl	80013dc <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80014ea:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80014ec:	4912      	ldr	r1, [pc, #72]	; (8001538 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80014ee:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80014f0:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 80014f2:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80014f4:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80014f6:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80014fa:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80014fc:	bf38      	it	cc
 80014fe:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001500:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001502:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001504:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001506:	f000 fa51 	bl	80019ac <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800150a:	0763      	lsls	r3, r4, #29
 800150c:	d008      	beq.n	8001520 <pvPortMalloc+0xfc>
 800150e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001512:	f383 8811 	msr	BASEPRI, r3
 8001516:	f3bf 8f6f 	isb	sy
 800151a:	f3bf 8f4f 	dsb	sy
 800151e:	e7fe      	b.n	800151e <pvPortMalloc+0xfa>
}
 8001520:	4620      	mov	r0, r4
 8001522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001526:	bf00      	nop
 8001528:	20000030 	.word	0x20000030
 800152c:	20000c34 	.word	0x20000c34
 8001530:	20000034 	.word	0x20000034
 8001534:	20000c40 	.word	0x20000c40
 8001538:	20000c3c 	.word	0x20000c3c
 800153c:	20000c38 	.word	0x20000c38

08001540 <vPortFree>:
{
 8001540:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001542:	4604      	mov	r4, r0
 8001544:	b370      	cbz	r0, 80015a4 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001546:	4a18      	ldr	r2, [pc, #96]	; (80015a8 <vPortFree+0x68>)
 8001548:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800154c:	6812      	ldr	r2, [r2, #0]
 800154e:	4213      	tst	r3, r2
 8001550:	d108      	bne.n	8001564 <vPortFree+0x24>
 8001552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001556:	f383 8811 	msr	BASEPRI, r3
 800155a:	f3bf 8f6f 	isb	sy
 800155e:	f3bf 8f4f 	dsb	sy
 8001562:	e7fe      	b.n	8001562 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001564:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001568:	b141      	cbz	r1, 800157c <vPortFree+0x3c>
 800156a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800156e:	f383 8811 	msr	BASEPRI, r3
 8001572:	f3bf 8f6f 	isb	sy
 8001576:	f3bf 8f4f 	dsb	sy
 800157a:	e7fe      	b.n	800157a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800157c:	ea23 0302 	bic.w	r3, r3, r2
 8001580:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001584:	f000 f978 	bl	8001878 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001588:	4a08      	ldr	r2, [pc, #32]	; (80015ac <vPortFree+0x6c>)
 800158a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800158e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001590:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001594:	440b      	add	r3, r1
 8001596:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001598:	f7ff ff20 	bl	80013dc <prvInsertBlockIntoFreeList>
}
 800159c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80015a0:	f000 ba04 	b.w	80019ac <xTaskResumeAll>
 80015a4:	bd10      	pop	{r4, pc}
 80015a6:	bf00      	nop
 80015a8:	20000c34 	.word	0x20000c34
 80015ac:	20000c38 	.word	0x20000c38

080015b0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015b0:	4a06      	ldr	r2, [pc, #24]	; (80015cc <prvResetNextTaskUnblockTime+0x1c>)
 80015b2:	6813      	ldr	r3, [r2, #0]
 80015b4:	6819      	ldr	r1, [r3, #0]
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <prvResetNextTaskUnblockTime+0x20>)
 80015b8:	b919      	cbnz	r1, 80015c2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80015ba:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80015c6:	68d2      	ldr	r2, [r2, #12]
 80015c8:	6852      	ldr	r2, [r2, #4]
 80015ca:	e7f8      	b.n	80015be <prvResetNextTaskUnblockTime+0xe>
 80015cc:	20000c4c 	.word	0x20000c4c
 80015d0:	20000d24 	.word	0x20000d24

080015d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80015d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80015d8:	4e1b      	ldr	r6, [pc, #108]	; (8001648 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80015da:	681d      	ldr	r5, [r3, #0]
{
 80015dc:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80015de:	6830      	ldr	r0, [r6, #0]
{
 80015e0:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80015e2:	3004      	adds	r0, #4
 80015e4:	f7ff fdcd 	bl	8001182 <uxListRemove>
 80015e8:	4633      	mov	r3, r6
 80015ea:	b940      	cbnz	r0, 80015fe <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80015ec:	2001      	movs	r0, #1
 80015ee:	6831      	ldr	r1, [r6, #0]
 80015f0:	4e16      	ldr	r6, [pc, #88]	; (800164c <prvAddCurrentTaskToDelayedList+0x78>)
 80015f2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80015f4:	6832      	ldr	r2, [r6, #0]
 80015f6:	4088      	lsls	r0, r1
 80015f8:	ea22 0200 	bic.w	r2, r2, r0
 80015fc:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80015fe:	1c62      	adds	r2, r4, #1
 8001600:	d107      	bne.n	8001612 <prvAddCurrentTaskToDelayedList+0x3e>
 8001602:	b137      	cbz	r7, 8001612 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001604:	6819      	ldr	r1, [r3, #0]
 8001606:	4812      	ldr	r0, [pc, #72]	; (8001650 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001608:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800160a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800160e:	f7ff bd95 	b.w	800113c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001612:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001614:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001616:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001618:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800161a:	d907      	bls.n	800162c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800161c:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <prvAddCurrentTaskToDelayedList+0x80>)
 800161e:	6810      	ldr	r0, [r2, #0]
 8001620:	6819      	ldr	r1, [r3, #0]
}
 8001622:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001626:	3104      	adds	r1, #4
 8001628:	f7ff bd94 	b.w	8001154 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800162c:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <prvAddCurrentTaskToDelayedList+0x84>)
 800162e:	6810      	ldr	r0, [r2, #0]
 8001630:	6819      	ldr	r1, [r3, #0]
 8001632:	3104      	adds	r1, #4
 8001634:	f7ff fd8e 	bl	8001154 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <prvAddCurrentTaskToDelayedList+0x88>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800163e:	bf38      	it	cc
 8001640:	601c      	strcc	r4, [r3, #0]
 8001642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001644:	20000d6c 	.word	0x20000d6c
 8001648:	20000c48 	.word	0x20000c48
 800164c:	20000cf4 	.word	0x20000cf4
 8001650:	20000d44 	.word	0x20000d44
 8001654:	20000c50 	.word	0x20000c50
 8001658:	20000c4c 	.word	0x20000c4c
 800165c:	20000d24 	.word	0x20000d24

08001660 <xTaskCreate>:
	{
 8001660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001664:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8001668:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800166a:	4650      	mov	r0, sl
	{
 800166c:	460f      	mov	r7, r1
 800166e:	4699      	mov	r9, r3
 8001670:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001672:	f7ff fed7 	bl	8001424 <pvPortMalloc>
			if( pxStack != NULL )
 8001676:	4605      	mov	r5, r0
 8001678:	2800      	cmp	r0, #0
 800167a:	f000 8096 	beq.w	80017aa <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800167e:	2054      	movs	r0, #84	; 0x54
 8001680:	f7ff fed0 	bl	8001424 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001684:	4604      	mov	r4, r0
 8001686:	2800      	cmp	r0, #0
 8001688:	f000 808c 	beq.w	80017a4 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800168c:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001690:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001692:	4455      	add	r5, sl
 8001694:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001696:	f025 0a07 	bic.w	sl, r5, #7
 800169a:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800169e:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80016a0:	7859      	ldrb	r1, [r3, #1]
 80016a2:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80016a6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80016aa:	b109      	cbz	r1, 80016b0 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80016ac:	42bb      	cmp	r3, r7
 80016ae:	d1f7      	bne.n	80016a0 <xTaskCreate+0x40>
 80016b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80016b2:	f04f 0b00 	mov.w	fp, #0
 80016b6:	2d06      	cmp	r5, #6
 80016b8:	bf28      	it	cs
 80016ba:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80016bc:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80016be:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80016c0:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80016c2:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80016c4:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80016c8:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80016cc:	f7ff fd33 	bl	8001136 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016d0:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80016d4:	f104 0018 	add.w	r0, r4, #24
 80016d8:	f7ff fd2d 	bl	8001136 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80016dc:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80016e0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016e2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80016e4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80016e6:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80016ea:	464a      	mov	r2, r9
 80016ec:	4641      	mov	r1, r8
 80016ee:	4650      	mov	r0, sl
 80016f0:	f7ff fd80 	bl	80011f4 <pxPortInitialiseStack>
 80016f4:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80016f6:	b106      	cbz	r6, 80016fa <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80016f8:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80016fa:	f7ff fda3 	bl	8001244 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80016fe:	4b32      	ldr	r3, [pc, #200]	; (80017c8 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001700:	4e32      	ldr	r6, [pc, #200]	; (80017cc <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80017f8 <xTaskCreate+0x198>
 8001708:	3201      	adds	r2, #1
 800170a:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800170c:	6835      	ldr	r5, [r6, #0]
 800170e:	2d00      	cmp	r5, #0
 8001710:	d14e      	bne.n	80017b0 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001712:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d11d      	bne.n	8001756 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800171a:	eb08 0005 	add.w	r0, r8, r5
 800171e:	3514      	adds	r5, #20
 8001720:	f7ff fcfe 	bl	8001120 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001724:	2d8c      	cmp	r5, #140	; 0x8c
 8001726:	d1f8      	bne.n	800171a <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8001728:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80017fc <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 800172c:	4d28      	ldr	r5, [pc, #160]	; (80017d0 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 800172e:	4648      	mov	r0, r9
 8001730:	f7ff fcf6 	bl	8001120 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001734:	4628      	mov	r0, r5
 8001736:	f7ff fcf3 	bl	8001120 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800173a:	4826      	ldr	r0, [pc, #152]	; (80017d4 <xTaskCreate+0x174>)
 800173c:	f7ff fcf0 	bl	8001120 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001740:	4825      	ldr	r0, [pc, #148]	; (80017d8 <xTaskCreate+0x178>)
 8001742:	f7ff fced 	bl	8001120 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001746:	4825      	ldr	r0, [pc, #148]	; (80017dc <xTaskCreate+0x17c>)
 8001748:	f7ff fcea 	bl	8001120 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800174c:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <xTaskCreate+0x180>)
 800174e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001752:	4b24      	ldr	r3, [pc, #144]	; (80017e4 <xTaskCreate+0x184>)
 8001754:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001756:	2501      	movs	r5, #1
		uxTaskNumber++;
 8001758:	4a23      	ldr	r2, [pc, #140]	; (80017e8 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 800175a:	4924      	ldr	r1, [pc, #144]	; (80017ec <xTaskCreate+0x18c>)
		uxTaskNumber++;
 800175c:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800175e:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001760:	3301      	adds	r3, #1
 8001762:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001764:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001766:	fa05 f302 	lsl.w	r3, r5, r2
 800176a:	4303      	orrs	r3, r0
 800176c:	2014      	movs	r0, #20
 800176e:	600b      	str	r3, [r1, #0]
 8001770:	fb00 8002 	mla	r0, r0, r2, r8
 8001774:	4639      	mov	r1, r7
 8001776:	f7ff fce1 	bl	800113c <vListInsertEnd>
	taskEXIT_CRITICAL();
 800177a:	f7ff fd85 	bl	8001288 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <xTaskCreate+0x190>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	b163      	cbz	r3, 800179e <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001784:	6833      	ldr	r3, [r6, #0]
 8001786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001788:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800178a:	429a      	cmp	r2, r3
 800178c:	d207      	bcs.n	800179e <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 800178e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <xTaskCreate+0x194>)
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	f3bf 8f4f 	dsb	sy
 800179a:	f3bf 8f6f 	isb	sy
	}
 800179e:	4628      	mov	r0, r5
 80017a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80017a4:	4628      	mov	r0, r5
 80017a6:	f7ff fecb 	bl	8001540 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80017aa:	f04f 35ff 	mov.w	r5, #4294967295
 80017ae:	e7f6      	b.n	800179e <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <xTaskCreate+0x190>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1ce      	bne.n	8001756 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80017b8:	6833      	ldr	r3, [r6, #0]
 80017ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017be:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80017c0:	bf98      	it	ls
 80017c2:	6034      	strls	r4, [r6, #0]
 80017c4:	e7c7      	b.n	8001756 <xTaskCreate+0xf6>
 80017c6:	bf00      	nop
 80017c8:	20000ce0 	.word	0x20000ce0
 80017cc:	20000c48 	.word	0x20000c48
 80017d0:	20000d0c 	.word	0x20000d0c
 80017d4:	20000d2c 	.word	0x20000d2c
 80017d8:	20000d58 	.word	0x20000d58
 80017dc:	20000d44 	.word	0x20000d44
 80017e0:	20000c4c 	.word	0x20000c4c
 80017e4:	20000c50 	.word	0x20000c50
 80017e8:	20000cf0 	.word	0x20000cf0
 80017ec:	20000cf4 	.word	0x20000cf4
 80017f0:	20000d40 	.word	0x20000d40
 80017f4:	e000ed04 	.word	0xe000ed04
 80017f8:	20000c54 	.word	0x20000c54
 80017fc:	20000cf8 	.word	0x20000cf8

08001800 <vTaskStartScheduler>:
{
 8001800:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001802:	2400      	movs	r4, #0
 8001804:	4b16      	ldr	r3, [pc, #88]	; (8001860 <vTaskStartScheduler+0x60>)
 8001806:	9400      	str	r4, [sp, #0]
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	2280      	movs	r2, #128	; 0x80
 800180c:	4623      	mov	r3, r4
 800180e:	4915      	ldr	r1, [pc, #84]	; (8001864 <vTaskStartScheduler+0x64>)
 8001810:	4815      	ldr	r0, [pc, #84]	; (8001868 <vTaskStartScheduler+0x68>)
 8001812:	f7ff ff25 	bl	8001660 <xTaskCreate>
	if( xReturn == pdPASS )
 8001816:	2801      	cmp	r0, #1
 8001818:	d114      	bne.n	8001844 <vTaskStartScheduler+0x44>
 800181a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800181e:	f383 8811 	msr	BASEPRI, r3
 8001822:	f3bf 8f6f 	isb	sy
 8001826:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800182a:	f04f 32ff 	mov.w	r2, #4294967295
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <vTaskStartScheduler+0x6c>)
 8001830:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <vTaskStartScheduler+0x70>)
 8001834:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <vTaskStartScheduler+0x74>)
 8001838:	601c      	str	r4, [r3, #0]
}
 800183a:	b002      	add	sp, #8
 800183c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001840:	f7ff bd82 	b.w	8001348 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001844:	3001      	adds	r0, #1
 8001846:	d108      	bne.n	800185a <vTaskStartScheduler+0x5a>
 8001848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184c:	f383 8811 	msr	BASEPRI, r3
 8001850:	f3bf 8f6f 	isb	sy
 8001854:	f3bf 8f4f 	dsb	sy
 8001858:	e7fe      	b.n	8001858 <vTaskStartScheduler+0x58>
}
 800185a:	b002      	add	sp, #8
 800185c:	bd10      	pop	{r4, pc}
 800185e:	bf00      	nop
 8001860:	20000d20 	.word	0x20000d20
 8001864:	08001ff4 	.word	0x08001ff4
 8001868:	08001ae5 	.word	0x08001ae5
 800186c:	20000d24 	.word	0x20000d24
 8001870:	20000d40 	.word	0x20000d40
 8001874:	20000d6c 	.word	0x20000d6c

08001878 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001878:	4a02      	ldr	r2, [pc, #8]	; (8001884 <vTaskSuspendAll+0xc>)
 800187a:	6813      	ldr	r3, [r2, #0]
 800187c:	3301      	adds	r3, #1
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000cec 	.word	0x20000cec

08001888 <xTaskIncrementTick>:
{
 8001888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800188c:	4b3c      	ldr	r3, [pc, #240]	; (8001980 <xTaskIncrementTick+0xf8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d153      	bne.n	800193c <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 8001894:	4b3b      	ldr	r3, [pc, #236]	; (8001984 <xTaskIncrementTick+0xfc>)
 8001896:	681c      	ldr	r4, [r3, #0]
 8001898:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800189a:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 800189c:	b9bc      	cbnz	r4, 80018ce <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800189e:	4b3a      	ldr	r3, [pc, #232]	; (8001988 <xTaskIncrementTick+0x100>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	b142      	cbz	r2, 80018b8 <xTaskIncrementTick+0x30>
 80018a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018aa:	f383 8811 	msr	BASEPRI, r3
 80018ae:	f3bf 8f6f 	isb	sy
 80018b2:	f3bf 8f4f 	dsb	sy
 80018b6:	e7fe      	b.n	80018b6 <xTaskIncrementTick+0x2e>
 80018b8:	4a34      	ldr	r2, [pc, #208]	; (800198c <xTaskIncrementTick+0x104>)
 80018ba:	6819      	ldr	r1, [r3, #0]
 80018bc:	6810      	ldr	r0, [r2, #0]
 80018be:	6018      	str	r0, [r3, #0]
 80018c0:	6011      	str	r1, [r2, #0]
 80018c2:	4a33      	ldr	r2, [pc, #204]	; (8001990 <xTaskIncrementTick+0x108>)
 80018c4:	6813      	ldr	r3, [r2, #0]
 80018c6:	3301      	adds	r3, #1
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	f7ff fe71 	bl	80015b0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80018ce:	4d31      	ldr	r5, [pc, #196]	; (8001994 <xTaskIncrementTick+0x10c>)
 80018d0:	f04f 0b00 	mov.w	fp, #0
 80018d4:	682b      	ldr	r3, [r5, #0]
 80018d6:	4f30      	ldr	r7, [pc, #192]	; (8001998 <xTaskIncrementTick+0x110>)
 80018d8:	429c      	cmp	r4, r3
 80018da:	d33e      	bcc.n	800195a <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018dc:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001988 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80018e0:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80019a8 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018e4:	f8d8 2000 	ldr.w	r2, [r8]
 80018e8:	6812      	ldr	r2, [r2, #0]
 80018ea:	bb72      	cbnz	r2, 800194a <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	602a      	str	r2, [r5, #0]
					break;
 80018f2:	e032      	b.n	800195a <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018f4:	f106 0a04 	add.w	sl, r6, #4
 80018f8:	4650      	mov	r0, sl
 80018fa:	f7ff fc42 	bl	8001182 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80018fe:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001900:	b119      	cbz	r1, 800190a <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001902:	f106 0018 	add.w	r0, r6, #24
 8001906:	f7ff fc3c 	bl	8001182 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800190a:	2201      	movs	r2, #1
 800190c:	f04f 0e14 	mov.w	lr, #20
 8001910:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001912:	f8d9 3000 	ldr.w	r3, [r9]
 8001916:	fa02 f100 	lsl.w	r1, r2, r0
 800191a:	4319      	orrs	r1, r3
 800191c:	4b1f      	ldr	r3, [pc, #124]	; (800199c <xTaskIncrementTick+0x114>)
 800191e:	f8c9 1000 	str.w	r1, [r9]
 8001922:	fb0e 3000 	mla	r0, lr, r0, r3
 8001926:	4651      	mov	r1, sl
 8001928:	f7ff fc08 	bl	800113c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800192c:	6838      	ldr	r0, [r7, #0]
 800192e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001930:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001932:	4291      	cmp	r1, r2
 8001934:	bf28      	it	cs
 8001936:	f04f 0b01 	movcs.w	fp, #1
 800193a:	e7d3      	b.n	80018e4 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 800193c:	4a18      	ldr	r2, [pc, #96]	; (80019a0 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 800193e:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8001942:	6813      	ldr	r3, [r2, #0]
 8001944:	3301      	adds	r3, #1
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	e011      	b.n	800196e <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800194a:	f8d8 2000 	ldr.w	r2, [r8]
 800194e:	68d2      	ldr	r2, [r2, #12]
 8001950:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001952:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001954:	428c      	cmp	r4, r1
 8001956:	d2cd      	bcs.n	80018f4 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001958:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <xTaskIncrementTick+0x114>)
 800195e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001960:	2214      	movs	r2, #20
 8001962:	434a      	muls	r2, r1
 8001964:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001966:	2a02      	cmp	r2, #2
 8001968:	bf28      	it	cs
 800196a:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800196e:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <xTaskIncrementTick+0x11c>)
 8001970:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001972:	2a00      	cmp	r2, #0
 8001974:	bf18      	it	ne
 8001976:	f04f 0b01 	movne.w	fp, #1
}
 800197a:	4658      	mov	r0, fp
 800197c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001980:	20000cec 	.word	0x20000cec
 8001984:	20000d6c 	.word	0x20000d6c
 8001988:	20000c4c 	.word	0x20000c4c
 800198c:	20000c50 	.word	0x20000c50
 8001990:	20000d28 	.word	0x20000d28
 8001994:	20000d24 	.word	0x20000d24
 8001998:	20000c48 	.word	0x20000c48
 800199c:	20000c54 	.word	0x20000c54
 80019a0:	20000ce8 	.word	0x20000ce8
 80019a4:	20000d70 	.word	0x20000d70
 80019a8:	20000cf4 	.word	0x20000cf4

080019ac <xTaskResumeAll>:
{
 80019ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80019b0:	4c31      	ldr	r4, [pc, #196]	; (8001a78 <xTaskResumeAll+0xcc>)
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	b943      	cbnz	r3, 80019c8 <xTaskResumeAll+0x1c>
 80019b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ba:	f383 8811 	msr	BASEPRI, r3
 80019be:	f3bf 8f6f 	isb	sy
 80019c2:	f3bf 8f4f 	dsb	sy
 80019c6:	e7fe      	b.n	80019c6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80019c8:	f7ff fc3c 	bl	8001244 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80019cc:	6823      	ldr	r3, [r4, #0]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019d2:	6824      	ldr	r4, [r4, #0]
 80019d4:	b12c      	cbz	r4, 80019e2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80019d6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80019d8:	f7ff fc56 	bl	8001288 <vPortExitCritical>
}
 80019dc:	4620      	mov	r0, r4
 80019de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80019e2:	4b26      	ldr	r3, [pc, #152]	; (8001a7c <xTaskResumeAll+0xd0>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f5      	beq.n	80019d6 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019ea:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001a94 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80019ee:	4f24      	ldr	r7, [pc, #144]	; (8001a80 <xTaskResumeAll+0xd4>)
 80019f0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001a98 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019f4:	f8d9 3000 	ldr.w	r3, [r9]
 80019f8:	b9e3      	cbnz	r3, 8001a34 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80019fa:	b10c      	cbz	r4, 8001a00 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80019fc:	f7ff fdd8 	bl	80015b0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001a00:	4d20      	ldr	r5, [pc, #128]	; (8001a84 <xTaskResumeAll+0xd8>)
 8001a02:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001a04:	b144      	cbz	r4, 8001a18 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001a06:	2701      	movs	r7, #1
 8001a08:	4e1f      	ldr	r6, [pc, #124]	; (8001a88 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 8001a0a:	f7ff ff3d 	bl	8001888 <xTaskIncrementTick>
 8001a0e:	b100      	cbz	r0, 8001a12 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001a10:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001a12:	3c01      	subs	r4, #1
 8001a14:	d1f9      	bne.n	8001a0a <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001a16:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <xTaskResumeAll+0xdc>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0da      	beq.n	80019d6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a24:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <xTaskResumeAll+0xe0>)
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	f3bf 8f4f 	dsb	sy
 8001a2c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001a30:	2401      	movs	r4, #1
 8001a32:	e7d1      	b.n	80019d8 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001a34:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8001a38:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001a3a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a3c:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001a3e:	f104 0018 	add.w	r0, r4, #24
 8001a42:	f7ff fb9e 	bl	8001182 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a46:	4630      	mov	r0, r6
 8001a48:	f7ff fb9b 	bl	8001182 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001a4c:	2014      	movs	r0, #20
 8001a4e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a50:	6839      	ldr	r1, [r7, #0]
 8001a52:	fa05 f302 	lsl.w	r3, r5, r2
 8001a56:	430b      	orrs	r3, r1
 8001a58:	fb00 8002 	mla	r0, r0, r2, r8
 8001a5c:	4631      	mov	r1, r6
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	f7ff fb6c 	bl	800113c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <xTaskResumeAll+0xe4>)
 8001a66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6c:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8001a6e:	bf24      	itt	cs
 8001a70:	4b05      	ldrcs	r3, [pc, #20]	; (8001a88 <xTaskResumeAll+0xdc>)
 8001a72:	601d      	strcs	r5, [r3, #0]
 8001a74:	e7be      	b.n	80019f4 <xTaskResumeAll+0x48>
 8001a76:	bf00      	nop
 8001a78:	20000cec 	.word	0x20000cec
 8001a7c:	20000ce0 	.word	0x20000ce0
 8001a80:	20000cf4 	.word	0x20000cf4
 8001a84:	20000ce8 	.word	0x20000ce8
 8001a88:	20000d70 	.word	0x20000d70
 8001a8c:	e000ed04 	.word	0xe000ed04
 8001a90:	20000c48 	.word	0x20000c48
 8001a94:	20000d2c 	.word	0x20000d2c
 8001a98:	20000c54 	.word	0x20000c54

08001a9c <vTaskDelay>:
	{
 8001a9c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001a9e:	b940      	cbnz	r0, 8001ab2 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001aa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <vTaskDelay+0x40>)
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	f3bf 8f4f 	dsb	sy
 8001aac:	f3bf 8f6f 	isb	sy
 8001ab0:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <vTaskDelay+0x44>)
 8001ab4:	6819      	ldr	r1, [r3, #0]
 8001ab6:	b141      	cbz	r1, 8001aca <vTaskDelay+0x2e>
 8001ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001abc:	f383 8811 	msr	BASEPRI, r3
 8001ac0:	f3bf 8f6f 	isb	sy
 8001ac4:	f3bf 8f4f 	dsb	sy
 8001ac8:	e7fe      	b.n	8001ac8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001aca:	f7ff fed5 	bl	8001878 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001ace:	f7ff fd81 	bl	80015d4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001ad2:	f7ff ff6b 	bl	80019ac <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	d0e2      	beq.n	8001aa0 <vTaskDelay+0x4>
 8001ada:	bd08      	pop	{r3, pc}
 8001adc:	e000ed04 	.word	0xe000ed04
 8001ae0:	20000cec 	.word	0x20000cec

08001ae4 <prvIdleTask>:
{
 8001ae4:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001ae6:	4e17      	ldr	r6, [pc, #92]	; (8001b44 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001ae8:	4c17      	ldr	r4, [pc, #92]	; (8001b48 <prvIdleTask+0x64>)
 8001aea:	6823      	ldr	r3, [r4, #0]
 8001aec:	b963      	cbnz	r3, 8001b08 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <prvIdleTask+0x68>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d9f8      	bls.n	8001ae8 <prvIdleTask+0x4>
				taskYIELD();
 8001af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001afa:	4b15      	ldr	r3, [pc, #84]	; (8001b50 <prvIdleTask+0x6c>)
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	f3bf 8f4f 	dsb	sy
 8001b02:	f3bf 8f6f 	isb	sy
 8001b06:	e7ef      	b.n	8001ae8 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8001b08:	f7ff feb6 	bl	8001878 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001b0c:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8001b0e:	f7ff ff4d 	bl	80019ac <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8001b12:	2d00      	cmp	r5, #0
 8001b14:	d0e9      	beq.n	8001aea <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8001b16:	f7ff fb95 	bl	8001244 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001b1a:	68f3      	ldr	r3, [r6, #12]
 8001b1c:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b1e:	1d28      	adds	r0, r5, #4
 8001b20:	f7ff fb2f 	bl	8001182 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001b24:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <prvIdleTask+0x70>)
 8001b26:	6813      	ldr	r3, [r2, #0]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8001b2c:	6823      	ldr	r3, [r4, #0]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8001b32:	f7ff fba9 	bl	8001288 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8001b36:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001b38:	f7ff fd02 	bl	8001540 <vPortFree>
			vPortFree( pxTCB );
 8001b3c:	4628      	mov	r0, r5
 8001b3e:	f7ff fcff 	bl	8001540 <vPortFree>
 8001b42:	e7d2      	b.n	8001aea <prvIdleTask+0x6>
 8001b44:	20000d58 	.word	0x20000d58
 8001b48:	20000ce4 	.word	0x20000ce4
 8001b4c:	20000c54 	.word	0x20000c54
 8001b50:	e000ed04 	.word	0xe000ed04
 8001b54:	20000ce0 	.word	0x20000ce0

08001b58 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <vTaskSwitchContext+0x60>)
{
 8001b5a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <vTaskSwitchContext+0x64>)
 8001b60:	b112      	cbz	r2, 8001b68 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001b62:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001b68:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <vTaskSwitchContext+0x68>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	2214      	movs	r2, #20
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	f1c3 031f 	rsb	r3, r3, #31
 8001b7a:	435a      	muls	r2, r3
 8001b7c:	4911      	ldr	r1, [pc, #68]	; (8001bc4 <vTaskSwitchContext+0x6c>)
 8001b7e:	588c      	ldr	r4, [r1, r2]
 8001b80:	1888      	adds	r0, r1, r2
 8001b82:	b944      	cbnz	r4, 8001b96 <vTaskSwitchContext+0x3e>
	__asm volatile
 8001b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b88:	f383 8811 	msr	BASEPRI, r3
 8001b8c:	f3bf 8f6f 	isb	sy
 8001b90:	f3bf 8f4f 	dsb	sy
 8001b94:	e7fe      	b.n	8001b94 <vTaskSwitchContext+0x3c>
 8001b96:	6844      	ldr	r4, [r0, #4]
 8001b98:	3208      	adds	r2, #8
 8001b9a:	6864      	ldr	r4, [r4, #4]
 8001b9c:	440a      	add	r2, r1
 8001b9e:	4294      	cmp	r4, r2
 8001ba0:	bf08      	it	eq
 8001ba2:	6862      	ldreq	r2, [r4, #4]
 8001ba4:	6044      	str	r4, [r0, #4]
 8001ba6:	bf08      	it	eq
 8001ba8:	6042      	streq	r2, [r0, #4]
 8001baa:	2214      	movs	r2, #20
 8001bac:	fb02 1303 	mla	r3, r2, r3, r1
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	68da      	ldr	r2, [r3, #12]
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <vTaskSwitchContext+0x70>)
 8001bb6:	e7d5      	b.n	8001b64 <vTaskSwitchContext+0xc>
 8001bb8:	20000cec 	.word	0x20000cec
 8001bbc:	20000d70 	.word	0x20000d70
 8001bc0:	20000cf4 	.word	0x20000cf4
 8001bc4:	20000c54 	.word	0x20000c54
 8001bc8:	20000c48 	.word	0x20000c48

08001bcc <Led_GateKeeper>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Led_GateKeeper(void*pvParameters)
{
 8001bcc:	b510      	push	{r4, lr}
	/*TickType_t xDelay= 0;*/
    TickType_t xDelay = 500 / portTICK_PERIOD_MS;
    for(;;)
    {
    	vTaskDelay(2000);
    	HAL_GPIO_WritePin(GPIOC, LED_Pin, GPIO_PIN_RESET);
 8001bce:	4c0d      	ldr	r4, [pc, #52]	; (8001c04 <Led_GateKeeper+0x38>)
    	vTaskDelay(2000);
 8001bd0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bd4:	f7ff ff62 	bl	8001a9c <vTaskDelay>
    	HAL_GPIO_WritePin(GPIOC, LED_Pin, GPIO_PIN_RESET);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bde:	4620      	mov	r0, r4
 8001be0:	f7fe fc0c 	bl	80003fc <HAL_GPIO_WritePin>
    	/*osDelay(1000);*/

    	vTaskDelay(2000);
 8001be4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001be8:	f7ff ff58 	bl	8001a9c <vTaskDelay>
    	HAL_GPIO_WritePin(GPIOC, LED_Pin, GPIO_PIN_SET);
 8001bec:	4620      	mov	r0, r4
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bf4:	f7fe fc02 	bl	80003fc <HAL_GPIO_WritePin>
    	vTaskDelay(2000);
 8001bf8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bfc:	f7ff ff4e 	bl	8001a9c <vTaskDelay>
 8001c00:	e7e6      	b.n	8001bd0 <Led_GateKeeper+0x4>
 8001c02:	bf00      	nop
 8001c04:	40011000 	.word	0x40011000

08001c08 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001c08:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	f7ff fa80 	bl	8001110 <osDelay>
 8001c10:	e7fb      	b.n	8001c0a <StartDefaultTask+0x2>

08001c12 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c12:	2228      	movs	r2, #40	; 0x28
{
 8001c14:	b530      	push	{r4, r5, lr}
 8001c16:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c18:	eb0d 0002 	add.w	r0, sp, r2
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	f000 f9bb 	bl	8001f98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c22:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c24:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c26:	eb0d 0002 	add.w	r0, sp, r2
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	f000 f9b4 	bl	8001f98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c30:	462a      	mov	r2, r5
 8001c32:	2100      	movs	r1, #0
 8001c34:	a801      	add	r0, sp, #4
 8001c36:	f000 f9af 	bl	8001f98 <memset>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c3a:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001c3c:	230a      	movs	r3, #10
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c3e:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001c40:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c42:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c44:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001c46:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c48:	f7fe fbe4 	bl	8000414 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c4c:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c4e:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c50:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c52:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c54:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c56:	9107      	str	r1, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c58:	9108      	str	r1, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c5a:	9109      	str	r1, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c5c:	f7fe fda2 	bl	80007a4 <HAL_RCC_ClockConfig>
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c60:	f44f 7300 	mov.w	r3, #512	; 0x200
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c64:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001c66:	9401      	str	r4, [sp, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001c68:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c6a:	f7fe fe7b 	bl	8000964 <HAL_RCCEx_PeriphCLKConfig>
}
 8001c6e:	b015      	add	sp, #84	; 0x54
 8001c70:	bd30      	pop	{r4, r5, pc}
	...

08001c74 <main>:
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8001c78:	f7fe fa6a 	bl	8000150 <HAL_Init>
  SystemClock_Config();
 8001c7c:	f7ff ffc9 	bl	8001c12 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	2210      	movs	r2, #16
 8001c82:	2100      	movs	r1, #0
 8001c84:	a807      	add	r0, sp, #28
 8001c86:	f000 f987 	bl	8001f98 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8a:	4b37      	ldr	r3, [pc, #220]	; (8001d68 <main+0xf4>)
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c90:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001c92:	4836      	ldr	r0, [pc, #216]	; (8001d6c <main+0xf8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c94:	f042 0210 	orr.w	r2, r2, #16
 8001c98:	619a      	str	r2, [r3, #24]
 8001c9a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c9e:	f002 0210 	and.w	r2, r2, #16
 8001ca2:	9204      	str	r2, [sp, #16]
 8001ca4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ca6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca8:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001caa:	f042 0220 	orr.w	r2, r2, #32
 8001cae:	619a      	str	r2, [r3, #24]
 8001cb0:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2702      	movs	r7, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cb4:	f002 0220 	and.w	r2, r2, #32
 8001cb8:	9205      	str	r2, [sp, #20]
 8001cba:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbc:	699a      	ldr	r2, [r3, #24]
  hrtc.Instance = RTC;
 8001cbe:	4d2c      	ldr	r5, [pc, #176]	; (8001d70 <main+0xfc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc0:	f042 0204 	orr.w	r2, r2, #4
 8001cc4:	619a      	str	r2, [r3, #24]
 8001cc6:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001cc8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	9306      	str	r3, [sp, #24]
 8001cd0:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001cd2:	f7fe fb93 	bl	80003fc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED_Pin;
 8001cd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001cda:	a907      	add	r1, sp, #28
 8001cdc:	4823      	ldr	r0, [pc, #140]	; (8001d6c <main+0xf8>)
  GPIO_InitStruct.Pin = LED_Pin;
 8001cde:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce4:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001ce6:	f7fe faa9 	bl	800023c <HAL_GPIO_Init>
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001cea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cee:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf2:	4920      	ldr	r1, [pc, #128]	; (8001d74 <main+0x100>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001cf4:	4628      	mov	r0, r5
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001cf6:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  RTC_TimeTypeDef sTime = {0};
 8001cfa:	f8ad 400c 	strh.w	r4, [sp, #12]
 8001cfe:	f88d 400e 	strb.w	r4, [sp, #14]
  RTC_DateTypeDef DateToUpdate = {0};
 8001d02:	9407      	str	r4, [sp, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d04:	f7ff f890 	bl	8000e28 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d08:	4632      	mov	r2, r6
 8001d0a:	a903      	add	r1, sp, #12
 8001d0c:	4628      	mov	r0, r5
  sTime.Hours = 0x0;
 8001d0e:	f88d 400c 	strb.w	r4, [sp, #12]
  sTime.Minutes = 0x0;
 8001d12:	f88d 400d 	strb.w	r4, [sp, #13]
  sTime.Seconds = 0x0;
 8001d16:	f88d 400e 	strb.w	r4, [sp, #14]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001d1a:	f7fe ffc0 	bl	8000c9e <HAL_RTC_SetTime>
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001d1e:	4632      	mov	r2, r6
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d20:	f88d 601c 	strb.w	r6, [sp, #28]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001d24:	f88d 601d 	strb.w	r6, [sp, #29]
  DateToUpdate.Date = 0x1;
 8001d28:	f88d 601e 	strb.w	r6, [sp, #30]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001d2c:	a907      	add	r1, sp, #28
 8001d2e:	4628      	mov	r0, r5
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001d30:	4e11      	ldr	r6, [pc, #68]	; (8001d78 <main+0x104>)
  DateToUpdate.Year = 0x0;
 8001d32:	f88d 401f 	strb.w	r4, [sp, #31]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001d36:	ad07      	add	r5, sp, #28
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8001d38:	f7ff f802 	bl	8000d40 <HAL_RTC_SetDate>
xTaskCreate(Led_GateKeeper,                  /*TASK POINTER*/
 8001d3c:	4623      	mov	r3, r4
 8001d3e:	2280      	movs	r2, #128	; 0x80
 8001d40:	490e      	ldr	r1, [pc, #56]	; (8001d7c <main+0x108>)
 8001d42:	9401      	str	r4, [sp, #4]
 8001d44:	9700      	str	r7, [sp, #0]
 8001d46:	480e      	ldr	r0, [pc, #56]	; (8001d80 <main+0x10c>)
 8001d48:	f7ff fc8a 	bl	8001660 <xTaskCreate>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001d4c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d50:	6833      	ldr	r3, [r6, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001d52:	4621      	mov	r1, r4
 8001d54:	a807      	add	r0, sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001d56:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001d58:	f7ff f9c1 	bl	80010de <osThreadCreate>
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <main+0x110>)
 8001d5e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001d60:	f7ff f9b8 	bl	80010d4 <osKernelStart>
 8001d64:	e7fe      	b.n	8001d64 <main+0xf0>
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40011000 	.word	0x40011000
 8001d70:	20000d7c 	.word	0x20000d7c
 8001d74:	40002800 	.word	0x40002800
 8001d78:	08001fe0 	.word	0x08001fe0
 8001d7c:	08001ff9 	.word	0x08001ff9
 8001d80:	08001bcd 	.word	0x08001bcd
 8001d84:	20000d78 	.word	0x20000d78

08001d88 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d88:	6802      	ldr	r2, [r0, #0]
 8001d8a:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d101      	bne.n	8001d94 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001d90:	f7fe b9f0 	b.w	8000174 <HAL_IncTick>
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40012c00 	.word	0x40012c00

08001d9c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d9c:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <HAL_MspInit+0x48>)
{
 8001d9e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001da0:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001da2:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001da4:	f042 0201 	orr.w	r2, r2, #1
 8001da8:	619a      	str	r2, [r3, #24]
 8001daa:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dac:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001db0:	f002 0201 	and.w	r2, r2, #1
 8001db4:	9200      	str	r2, [sp, #0]
 8001db6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db8:	69da      	ldr	r2, [r3, #28]
 8001dba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001dbe:	61da      	str	r2, [r3, #28]
 8001dc0:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dc2:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001dcc:	f7fe f9f6 	bl	80001bc <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dd0:	4a05      	ldr	r2, [pc, #20]	; (8001de8 <HAL_MspInit+0x4c>)
 8001dd2:	6853      	ldr	r3, [r2, #4]
 8001dd4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ddc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dde:	b003      	add	sp, #12
 8001de0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40010000 	.word	0x40010000

08001dec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001dec:	b507      	push	{r0, r1, r2, lr}
  if(hrtc->Instance==RTC)
 8001dee:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <HAL_RTC_MspInit+0x30>)
 8001df0:	6802      	ldr	r2, [r0, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d10e      	bne.n	8001e14 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001df6:	f7fe fb07 	bl	8000408 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_RTC_MspInit+0x34>)
 8001dfc:	69da      	ldr	r2, [r3, #28]
 8001dfe:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8001e02:	61da      	str	r2, [r3, #28]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e04:	2201      	movs	r2, #1
    __HAL_RCC_BKP_CLK_ENABLE();
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e0c:	9301      	str	r3, [sp, #4]
 8001e0e:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_RTC_ENABLE();
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <HAL_RTC_MspInit+0x38>)
 8001e12:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e14:	b003      	add	sp, #12
 8001e16:	f85d fb04 	ldr.w	pc, [sp], #4
 8001e1a:	bf00      	nop
 8001e1c:	40002800 	.word	0x40002800
 8001e20:	40021000 	.word	0x40021000
 8001e24:	4242043c 	.word	0x4242043c

08001e28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e28:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8001e2a:	4601      	mov	r1, r0
{
 8001e2c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2019      	movs	r0, #25
 8001e32:	f7fe f9c3 	bl	80001bc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8001e36:	2019      	movs	r0, #25
 8001e38:	f7fe f9f4 	bl	8000224 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e3c:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e3e:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e40:	699a      	ldr	r2, [r3, #24]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e42:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e48:	619a      	str	r2, [r3, #24]
 8001e4a:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e4c:	4c11      	ldr	r4, [pc, #68]	; (8001e94 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e52:	9302      	str	r3, [sp, #8]
 8001e54:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e56:	f7fe fd67 	bl	8000928 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e5a:	f7fe fd55 	bl	8000908 <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_InitTick+0x70>)
 8001e60:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001e62:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001e66:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e68:	4b0c      	ldr	r3, [pc, #48]	; (8001e9c <HAL_InitTick+0x74>)
 8001e6a:	fbb0 f0f3 	udiv	r0, r0, r3
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8001e6e:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001e70:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e72:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001e74:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 8001e76:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e78:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001e7a:	f7ff f90f 	bl	800109c <HAL_TIM_Base_Init>
 8001e7e:	b920      	cbnz	r0, 8001e8a <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001e80:	4620      	mov	r0, r4
 8001e82:	f7ff f822 	bl	8000eca <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8001e86:	b008      	add	sp, #32
 8001e88:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	e7fb      	b.n	8001e86 <HAL_InitTick+0x5e>
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	20000d90 	.word	0x20000d90
 8001e98:	40012c00 	.word	0x40012c00
 8001e9c:	000f4240 	.word	0x000f4240

08001ea0 <NMI_Handler>:
 8001ea0:	4770      	bx	lr

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	e7fe      	b.n	8001ea2 <HardFault_Handler>

08001ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea4:	e7fe      	b.n	8001ea4 <MemManage_Handler>

08001ea6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ea6:	e7fe      	b.n	8001ea6 <BusFault_Handler>

08001ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ea8:	e7fe      	b.n	8001ea8 <UsageFault_Handler>

08001eaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eaa:	4770      	bx	lr

08001eac <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001eac:	4801      	ldr	r0, [pc, #4]	; (8001eb4 <TIM1_UP_IRQHandler+0x8>)
 8001eae:	f7ff b81b 	b.w	8000ee8 <HAL_TIM_IRQHandler>
 8001eb2:	bf00      	nop
 8001eb4:	20000d90 	.word	0x20000d90

08001eb8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <SystemInit+0x40>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	f042 0201 	orr.w	r2, r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <SystemInit+0x44>)
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001ed0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ed4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001edc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001ee4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001ee6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001eea:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001eec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <SystemInit+0x48>)
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	f8ff0000 	.word	0xf8ff0000
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f04:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f06:	e003      	b.n	8001f10 <LoopCopyDataInit>

08001f08 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001f0a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f0c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f0e:	3104      	adds	r1, #4

08001f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f10:	480a      	ldr	r0, [pc, #40]	; (8001f3c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001f14:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f16:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f18:	d3f6      	bcc.n	8001f08 <CopyDataInit>
  ldr r2, =_sbss
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001f1c:	e002      	b.n	8001f24 <LoopFillZerobss>

08001f1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001f20:	f842 3b04 	str.w	r3, [r2], #4

08001f24 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001f26:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001f28:	d3f9      	bcc.n	8001f1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f2a:	f7ff ffc5 	bl	8001eb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f2e:	f000 f80f 	bl	8001f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f32:	f7ff fe9f 	bl	8001c74 <main>
  bx lr
 8001f36:	4770      	bx	lr
  ldr r3, =_sidata
 8001f38:	08002030 	.word	0x08002030
  ldr r0, =_sdata
 8001f3c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001f40:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001f44:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001f48:	20000dd0 	.word	0x20000dd0

08001f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f4c:	e7fe      	b.n	8001f4c <ADC1_2_IRQHandler>
	...

08001f50 <__libc_init_array>:
 8001f50:	b570      	push	{r4, r5, r6, lr}
 8001f52:	2500      	movs	r5, #0
 8001f54:	4e0c      	ldr	r6, [pc, #48]	; (8001f88 <__libc_init_array+0x38>)
 8001f56:	4c0d      	ldr	r4, [pc, #52]	; (8001f8c <__libc_init_array+0x3c>)
 8001f58:	1ba4      	subs	r4, r4, r6
 8001f5a:	10a4      	asrs	r4, r4, #2
 8001f5c:	42a5      	cmp	r5, r4
 8001f5e:	d109      	bne.n	8001f74 <__libc_init_array+0x24>
 8001f60:	f000 f822 	bl	8001fa8 <_init>
 8001f64:	2500      	movs	r5, #0
 8001f66:	4e0a      	ldr	r6, [pc, #40]	; (8001f90 <__libc_init_array+0x40>)
 8001f68:	4c0a      	ldr	r4, [pc, #40]	; (8001f94 <__libc_init_array+0x44>)
 8001f6a:	1ba4      	subs	r4, r4, r6
 8001f6c:	10a4      	asrs	r4, r4, #2
 8001f6e:	42a5      	cmp	r5, r4
 8001f70:	d105      	bne.n	8001f7e <__libc_init_array+0x2e>
 8001f72:	bd70      	pop	{r4, r5, r6, pc}
 8001f74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f78:	4798      	blx	r3
 8001f7a:	3501      	adds	r5, #1
 8001f7c:	e7ee      	b.n	8001f5c <__libc_init_array+0xc>
 8001f7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f82:	4798      	blx	r3
 8001f84:	3501      	adds	r5, #1
 8001f86:	e7f2      	b.n	8001f6e <__libc_init_array+0x1e>
 8001f88:	08002028 	.word	0x08002028
 8001f8c:	08002028 	.word	0x08002028
 8001f90:	08002028 	.word	0x08002028
 8001f94:	0800202c 	.word	0x0800202c

08001f98 <memset>:
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4402      	add	r2, r0
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d100      	bne.n	8001fa2 <memset+0xa>
 8001fa0:	4770      	bx	lr
 8001fa2:	f803 1b01 	strb.w	r1, [r3], #1
 8001fa6:	e7f9      	b.n	8001f9c <memset+0x4>

08001fa8 <_init>:
 8001fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001faa:	bf00      	nop
 8001fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fae:	bc08      	pop	{r3}
 8001fb0:	469e      	mov	lr, r3
 8001fb2:	4770      	bx	lr

08001fb4 <_fini>:
 8001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb6:	bf00      	nop
 8001fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fba:	bc08      	pop	{r3}
 8001fbc:	469e      	mov	lr, r3
 8001fbe:	4770      	bx	lr
